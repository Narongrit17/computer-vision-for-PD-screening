{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4f2a98d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus\\miniconda3\\envs\\finger_tap\\lib\\site-packages\\outdated\\utils.py:14: OutdatedPackageWarning: The package pingouin is out of date. Your version is 0.5.3, the latest is 0.5.5.\n",
      "Set the environment variable OUTDATED_IGNORE=1 to disable these warnings.\n",
      "  return warn(\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import mediapipe as mp\n",
    "import time\n",
    "import math\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from scipy.signal import find_peaks\n",
    "from scipy import signal\n",
    "\n",
    "# Preprocessing: scaler\n",
    "import sklearn\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer, RobustScaler\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
    "\n",
    "from tensorflow import keras as K\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "from sklearn import metrics\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report, make_scorer\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import KFold,cross_validate\n",
    "from tensorflow.keras.layers import Dense, Activation, Flatten, concatenate, Input, Dropout, LSTM, Bidirectional,BatchNormalization,PReLU,ReLU,Reshape\n",
    "#from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "import matplotlib.pyplot as plt;\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from tensorflow.keras.layers import Conv1D,Conv2D,Add\n",
    "from tensorflow.keras.layers import MaxPool1D, MaxPooling2D\n",
    "import seaborn as sns\n",
    "\n",
    "import pickle\n",
    "import pingouin as pg\n",
    "\n",
    "mpHands = mp.solutions.hands\n",
    "hands = mpHands.Hands()\n",
    "mpDraw = mp.solutions.drawing_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6e7d0b08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 203 y: 164 time: -1.6666666666666667\n",
      "id: 8 x: 181 y: 115 time: -1.6666666666666667\n",
      "id: 4 x: 385 y: 167 time: -1.6666666666666667\n",
      "id: 8 x: 411 y: 105 time: -1.6666666666666667\n",
      "id: 4 x: 203 y: 163 time: 33.333333333333336\n",
      "id: 8 x: 180 y: 115 time: 33.333333333333336\n",
      "id: 4 x: 386 y: 166 time: 33.333333333333336\n",
      "id: 8 x: 411 y: 105 time: 33.333333333333336\n",
      "id: 4 x: 202 y: 163 time: 66.66666666666667\n",
      "id: 8 x: 180 y: 115 time: 66.66666666666667\n",
      "id: 4 x: 386 y: 166 time: 66.66666666666667\n",
      "id: 8 x: 411 y: 105 time: 66.66666666666667\n",
      "id: 4 x: 202 y: 164 time: 100.0\n",
      "id: 8 x: 179 y: 114 time: 100.0\n",
      "id: 4 x: 385 y: 166 time: 100.0\n",
      "id: 8 x: 410 y: 105 time: 100.0\n",
      "id: 4 x: 202 y: 164 time: 133.33333333333334\n",
      "id: 8 x: 179 y: 115 time: 133.33333333333334\n",
      "id: 4 x: 385 y: 167 time: 133.33333333333334\n",
      "id: 8 x: 410 y: 105 time: 133.33333333333334\n",
      "id: 4 x: 201 y: 164 time: 166.66666666666669\n",
      "id: 8 x: 178 y: 115 time: 166.66666666666669\n",
      "id: 4 x: 385 y: 167 time: 166.66666666666669\n",
      "id: 8 x: 410 y: 106 time: 166.66666666666669\n",
      "id: 4 x: 201 y: 165 time: 200.0\n",
      "id: 8 x: 178 y: 116 time: 200.0\n",
      "id: 4 x: 385 y: 168 time: 200.0\n",
      "id: 8 x: 410 y: 106 time: 200.0\n",
      "id: 4 x: 201 y: 166 time: 233.33333333333334\n",
      "id: 8 x: 177 y: 116 time: 233.33333333333334\n",
      "id: 4 x: 384 y: 169 time: 233.33333333333334\n",
      "id: 8 x: 409 y: 107 time: 233.33333333333334\n",
      "id: 4 x: 200 y: 166 time: 266.6666666666667\n",
      "id: 8 x: 177 y: 118 time: 266.6666666666667\n",
      "id: 4 x: 384 y: 170 time: 266.6666666666667\n",
      "id: 8 x: 409 y: 108 time: 266.6666666666667\n",
      "id: 4 x: 200 y: 168 time: 300.00000000000006\n",
      "id: 8 x: 177 y: 118 time: 300.00000000000006\n",
      "id: 4 x: 384 y: 171 time: 300.00000000000006\n",
      "id: 8 x: 409 y: 109 time: 300.00000000000006\n",
      "id: 4 x: 200 y: 168 time: 333.33333333333337\n",
      "id: 8 x: 177 y: 119 time: 333.33333333333337\n",
      "id: 4 x: 384 y: 172 time: 333.33333333333337\n",
      "id: 8 x: 408 y: 110 time: 333.33333333333337\n",
      "id: 4 x: 200 y: 169 time: 366.6666666666667\n",
      "id: 8 x: 178 y: 120 time: 366.6666666666667\n",
      "id: 4 x: 384 y: 172 time: 366.6666666666667\n",
      "id: 8 x: 408 y: 110 time: 366.6666666666667\n",
      "id: 4 x: 200 y: 169 time: 400.0\n",
      "id: 8 x: 178 y: 120 time: 400.0\n",
      "id: 4 x: 383 y: 173 time: 400.0\n",
      "id: 8 x: 408 y: 111 time: 400.0\n",
      "id: 4 x: 200 y: 170 time: 433.33333333333337\n",
      "id: 8 x: 178 y: 120 time: 433.33333333333337\n",
      "id: 4 x: 384 y: 173 time: 433.33333333333337\n",
      "id: 8 x: 408 y: 111 time: 433.33333333333337\n",
      "id: 4 x: 201 y: 170 time: 466.6666666666667\n",
      "id: 8 x: 178 y: 121 time: 466.6666666666667\n",
      "id: 4 x: 383 y: 173 time: 466.6666666666667\n",
      "id: 8 x: 408 y: 111 time: 466.6666666666667\n",
      "id: 4 x: 201 y: 170 time: 500.0\n",
      "id: 8 x: 178 y: 121 time: 500.0\n",
      "id: 4 x: 384 y: 174 time: 500.0\n",
      "id: 8 x: 408 y: 112 time: 500.0\n",
      "id: 4 x: 201 y: 171 time: 533.3333333333334\n",
      "id: 8 x: 178 y: 121 time: 533.3333333333334\n",
      "id: 4 x: 384 y: 174 time: 533.3333333333334\n",
      "id: 8 x: 408 y: 112 time: 533.3333333333334\n",
      "id: 4 x: 201 y: 171 time: 566.6666666666666\n",
      "id: 8 x: 179 y: 122 time: 566.6666666666666\n",
      "id: 4 x: 384 y: 174 time: 566.6666666666666\n",
      "id: 8 x: 408 y: 112 time: 566.6666666666666\n",
      "id: 4 x: 201 y: 170 time: 600.0000000000001\n",
      "id: 8 x: 179 y: 121 time: 600.0000000000001\n",
      "id: 4 x: 385 y: 173 time: 600.0000000000001\n",
      "id: 8 x: 408 y: 112 time: 600.0000000000001\n",
      "id: 4 x: 202 y: 170 time: 633.3333333333334\n",
      "id: 8 x: 180 y: 121 time: 633.3333333333334\n",
      "id: 4 x: 386 y: 173 time: 633.3333333333334\n",
      "id: 8 x: 409 y: 111 time: 633.3333333333334\n",
      "id: 4 x: 203 y: 170 time: 666.6666666666667\n",
      "id: 8 x: 181 y: 121 time: 666.6666666666667\n",
      "id: 4 x: 387 y: 172 time: 666.6666666666667\n",
      "id: 8 x: 410 y: 111 time: 666.6666666666667\n",
      "id: 4 x: 203 y: 169 time: 700.0000000000001\n",
      "id: 8 x: 183 y: 122 time: 700.0000000000001\n",
      "id: 4 x: 388 y: 171 time: 700.0000000000001\n",
      "id: 8 x: 410 y: 111 time: 700.0000000000001\n",
      "id: 4 x: 204 y: 169 time: 733.3333333333334\n",
      "id: 8 x: 184 y: 123 time: 733.3333333333334\n",
      "id: 4 x: 389 y: 169 time: 733.3333333333334\n",
      "id: 8 x: 411 y: 111 time: 733.3333333333334\n",
      "id: 4 x: 204 y: 168 time: 766.6666666666667\n",
      "id: 8 x: 185 y: 123 time: 766.6666666666667\n",
      "id: 4 x: 391 y: 168 time: 766.6666666666667\n",
      "id: 8 x: 411 y: 112 time: 766.6666666666667\n",
      "id: 4 x: 205 y: 167 time: 800.0\n",
      "id: 8 x: 186 y: 124 time: 800.0\n",
      "id: 4 x: 392 y: 167 time: 800.0\n",
      "id: 8 x: 411 y: 113 time: 800.0\n",
      "id: 4 x: 204 y: 166 time: 833.3333333333334\n",
      "id: 8 x: 186 y: 125 time: 833.3333333333334\n",
      "id: 4 x: 394 y: 166 time: 833.3333333333334\n",
      "id: 8 x: 410 y: 115 time: 833.3333333333334\n",
      "id: 4 x: 204 y: 165 time: 866.6666666666667\n",
      "id: 8 x: 187 y: 127 time: 866.6666666666667\n",
      "id: 4 x: 398 y: 163 time: 866.6666666666667\n",
      "id: 8 x: 409 y: 118 time: 866.6666666666667\n",
      "id: 4 x: 202 y: 165 time: 900.0\n",
      "id: 8 x: 188 y: 130 time: 900.0\n",
      "id: 4 x: 403 y: 160 time: 900.0\n",
      "id: 8 x: 408 y: 124 time: 900.0\n",
      "id: 4 x: 201 y: 164 time: 933.3333333333334\n",
      "id: 8 x: 189 y: 134 time: 933.3333333333334\n",
      "id: 4 x: 406 y: 159 time: 933.3333333333334\n",
      "id: 8 x: 409 y: 139 time: 933.3333333333334\n",
      "id: 4 x: 200 y: 163 time: 966.6666666666666\n",
      "id: 8 x: 190 y: 139 time: 966.6666666666666\n",
      "id: 4 x: 413 y: 155 time: 966.6666666666666\n",
      "id: 8 x: 412 y: 151 time: 966.6666666666666\n",
      "id: 4 x: 197 y: 161 time: 1000.0\n",
      "id: 8 x: 190 y: 144 time: 1000.0\n",
      "id: 4 x: 415 y: 156 time: 1000.0\n",
      "id: 8 x: 414 y: 154 time: 1000.0\n",
      "id: 4 x: 192 y: 160 time: 1033.3333333333335\n",
      "id: 8 x: 189 y: 149 time: 1033.3333333333335\n",
      "id: 4 x: 416 y: 155 time: 1033.3333333333335\n",
      "id: 8 x: 414 y: 154 time: 1033.3333333333335\n",
      "id: 4 x: 192 y: 161 time: 1066.6666666666667\n",
      "id: 8 x: 190 y: 150 time: 1066.6666666666667\n",
      "id: 4 x: 415 y: 154 time: 1066.6666666666667\n",
      "id: 8 x: 413 y: 153 time: 1066.6666666666667\n",
      "id: 4 x: 191 y: 160 time: 1100.0\n",
      "id: 8 x: 190 y: 153 time: 1100.0\n",
      "id: 4 x: 415 y: 153 time: 1100.0\n",
      "id: 8 x: 413 y: 151 time: 1100.0\n",
      "id: 4 x: 191 y: 160 time: 1133.3333333333333\n",
      "id: 8 x: 189 y: 152 time: 1133.3333333333333\n",
      "id: 4 x: 414 y: 151 time: 1133.3333333333333\n",
      "id: 8 x: 414 y: 149 time: 1133.3333333333333\n",
      "id: 4 x: 191 y: 159 time: 1166.6666666666667\n",
      "id: 8 x: 189 y: 152 time: 1166.6666666666667\n",
      "id: 4 x: 413 y: 149 time: 1166.6666666666667\n",
      "id: 8 x: 414 y: 144 time: 1166.6666666666667\n",
      "id: 4 x: 192 y: 158 time: 1200.0000000000002\n",
      "id: 8 x: 190 y: 151 time: 1200.0000000000002\n",
      "id: 4 x: 411 y: 151 time: 1200.0000000000002\n",
      "id: 8 x: 413 y: 138 time: 1200.0000000000002\n",
      "id: 4 x: 195 y: 158 time: 1233.3333333333335\n",
      "id: 8 x: 192 y: 147 time: 1233.3333333333335\n",
      "id: 4 x: 407 y: 156 time: 1233.3333333333335\n",
      "id: 8 x: 412 y: 118 time: 1233.3333333333335\n",
      "id: 4 x: 199 y: 158 time: 1266.6666666666667\n",
      "id: 8 x: 193 y: 141 time: 1266.6666666666667\n",
      "id: 4 x: 404 y: 159 time: 1266.6666666666667\n",
      "id: 8 x: 414 y: 109 time: 1266.6666666666667\n",
      "id: 4 x: 201 y: 158 time: 1300.0\n",
      "id: 8 x: 193 y: 133 time: 1300.0\n",
      "id: 4 x: 403 y: 158 time: 1300.0\n",
      "id: 8 x: 416 y: 106 time: 1300.0\n",
      "id: 4 x: 202 y: 159 time: 1333.3333333333335\n",
      "id: 8 x: 191 y: 124 time: 1333.3333333333335\n",
      "id: 4 x: 402 y: 158 time: 1333.3333333333335\n",
      "id: 8 x: 419 y: 103 time: 1333.3333333333335\n",
      "id: 4 x: 202 y: 159 time: 1366.6666666666667\n",
      "id: 8 x: 189 y: 120 time: 1366.6666666666667\n",
      "id: 4 x: 402 y: 159 time: 1366.6666666666667\n",
      "id: 8 x: 421 y: 101 time: 1366.6666666666667\n",
      "id: 4 x: 201 y: 158 time: 1400.0000000000002\n",
      "id: 8 x: 190 y: 119 time: 1400.0000000000002\n",
      "id: 4 x: 404 y: 158 time: 1400.0000000000002\n",
      "id: 8 x: 420 y: 101 time: 1400.0000000000002\n",
      "id: 4 x: 200 y: 156 time: 1433.3333333333333\n",
      "id: 8 x: 190 y: 121 time: 1433.3333333333333\n",
      "id: 4 x: 406 y: 156 time: 1433.3333333333333\n",
      "id: 8 x: 419 y: 102 time: 1433.3333333333333\n",
      "id: 4 x: 200 y: 155 time: 1466.6666666666667\n",
      "id: 8 x: 191 y: 124 time: 1466.6666666666667\n",
      "id: 4 x: 410 y: 153 time: 1466.6666666666667\n",
      "id: 8 x: 416 y: 106 time: 1466.6666666666667\n",
      "id: 4 x: 199 y: 153 time: 1500.0\n",
      "id: 8 x: 191 y: 126 time: 1500.0\n",
      "id: 4 x: 412 y: 151 time: 1500.0\n",
      "id: 8 x: 412 y: 119 time: 1500.0\n",
      "id: 4 x: 198 y: 152 time: 1533.3333333333335\n",
      "id: 8 x: 192 y: 129 time: 1533.3333333333335\n",
      "id: 4 x: 414 y: 150 time: 1533.3333333333335\n",
      "id: 8 x: 413 y: 126 time: 1533.3333333333335\n",
      "id: 4 x: 197 y: 151 time: 1566.666666666667\n",
      "id: 8 x: 192 y: 132 time: 1566.666666666667\n",
      "id: 4 x: 418 y: 147 time: 1566.666666666667\n",
      "id: 8 x: 415 y: 139 time: 1566.666666666667\n",
      "id: 4 x: 194 y: 150 time: 1600.0\n",
      "id: 8 x: 192 y: 136 time: 1600.0\n",
      "id: 4 x: 418 y: 148 time: 1600.0\n",
      "id: 8 x: 416 y: 141 time: 1600.0\n",
      "id: 4 x: 191 y: 148 time: 1633.3333333333335\n",
      "id: 8 x: 190 y: 138 time: 1633.3333333333335\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 419 y: 147 time: 1633.3333333333335\n",
      "id: 8 x: 415 y: 141 time: 1633.3333333333335\n",
      "id: 4 x: 191 y: 148 time: 1666.6666666666667\n",
      "id: 8 x: 189 y: 139 time: 1666.6666666666667\n",
      "id: 4 x: 418 y: 146 time: 1666.6666666666667\n",
      "id: 8 x: 415 y: 140 time: 1666.6666666666667\n",
      "id: 4 x: 190 y: 149 time: 1700.0000000000002\n",
      "id: 8 x: 189 y: 140 time: 1700.0000000000002\n",
      "id: 4 x: 418 y: 146 time: 1700.0000000000002\n",
      "id: 8 x: 414 y: 140 time: 1700.0000000000002\n",
      "id: 4 x: 190 y: 150 time: 1733.3333333333335\n",
      "id: 8 x: 189 y: 141 time: 1733.3333333333335\n",
      "id: 4 x: 418 y: 145 time: 1733.3333333333335\n",
      "id: 8 x: 414 y: 140 time: 1733.3333333333335\n",
      "id: 4 x: 189 y: 150 time: 1766.6666666666667\n",
      "id: 8 x: 189 y: 142 time: 1766.6666666666667\n",
      "id: 4 x: 418 y: 147 time: 1766.6666666666667\n",
      "id: 8 x: 414 y: 139 time: 1766.6666666666667\n",
      "id: 4 x: 190 y: 151 time: 1800.0\n",
      "id: 8 x: 190 y: 142 time: 1800.0\n",
      "id: 4 x: 417 y: 147 time: 1800.0\n",
      "id: 8 x: 413 y: 138 time: 1800.0\n",
      "id: 4 x: 195 y: 152 time: 1833.3333333333335\n",
      "id: 8 x: 192 y: 135 time: 1833.3333333333335\n",
      "id: 4 x: 413 y: 148 time: 1833.3333333333335\n",
      "id: 8 x: 410 y: 123 time: 1833.3333333333335\n",
      "id: 4 x: 198 y: 155 time: 1866.6666666666667\n",
      "id: 8 x: 193 y: 130 time: 1866.6666666666667\n",
      "id: 4 x: 411 y: 151 time: 1866.6666666666667\n",
      "id: 8 x: 409 y: 113 time: 1866.6666666666667\n",
      "id: 4 x: 200 y: 156 time: 1900.0000000000002\n",
      "id: 8 x: 192 y: 130 time: 1900.0000000000002\n",
      "id: 4 x: 409 y: 152 time: 1900.0000000000002\n",
      "id: 8 x: 413 y: 108 time: 1900.0000000000002\n",
      "id: 4 x: 200 y: 156 time: 1933.3333333333333\n",
      "id: 8 x: 191 y: 129 time: 1933.3333333333333\n",
      "id: 4 x: 408 y: 152 time: 1933.3333333333333\n",
      "id: 8 x: 418 y: 103 time: 1933.3333333333333\n",
      "id: 4 x: 200 y: 157 time: 1966.6666666666667\n",
      "id: 8 x: 191 y: 128 time: 1966.6666666666667\n",
      "id: 4 x: 405 y: 154 time: 1966.6666666666667\n",
      "id: 8 x: 420 y: 101 time: 1966.6666666666667\n",
      "id: 4 x: 200 y: 157 time: 2000.0\n",
      "id: 8 x: 191 y: 128 time: 2000.0\n",
      "id: 4 x: 405 y: 154 time: 2000.0\n",
      "id: 8 x: 419 y: 100 time: 2000.0\n",
      "id: 4 x: 200 y: 157 time: 2033.3333333333337\n",
      "id: 8 x: 191 y: 130 time: 2033.3333333333337\n",
      "id: 4 x: 408 y: 153 time: 2033.3333333333337\n",
      "id: 8 x: 415 y: 103 time: 2033.3333333333337\n",
      "id: 4 x: 200 y: 157 time: 2066.666666666667\n",
      "id: 8 x: 191 y: 131 time: 2066.666666666667\n",
      "id: 4 x: 408 y: 152 time: 2066.666666666667\n",
      "id: 8 x: 413 y: 106 time: 2066.666666666667\n",
      "id: 4 x: 200 y: 156 time: 2101.666666666667\n",
      "id: 8 x: 190 y: 130 time: 2101.666666666667\n",
      "id: 4 x: 409 y: 151 time: 2101.666666666667\n",
      "id: 8 x: 411 y: 108 time: 2101.666666666667\n",
      "id: 4 x: 198 y: 155 time: 2135.0000000000005\n",
      "id: 8 x: 190 y: 131 time: 2135.0000000000005\n",
      "id: 4 x: 412 y: 147 time: 2135.0000000000005\n",
      "id: 8 x: 410 y: 121 time: 2135.0000000000005\n",
      "id: 4 x: 194 y: 154 time: 2168.3333333333335\n",
      "id: 8 x: 190 y: 135 time: 2168.3333333333335\n",
      "id: 4 x: 415 y: 142 time: 2168.3333333333335\n",
      "id: 8 x: 413 y: 137 time: 2168.3333333333335\n",
      "id: 4 x: 192 y: 153 time: 2201.6666666666665\n",
      "id: 8 x: 190 y: 136 time: 2201.6666666666665\n",
      "id: 4 x: 415 y: 142 time: 2201.6666666666665\n",
      "id: 8 x: 415 y: 137 time: 2201.6666666666665\n",
      "id: 4 x: 190 y: 152 time: 2235.0000000000005\n",
      "id: 8 x: 189 y: 139 time: 2235.0000000000005\n",
      "id: 4 x: 416 y: 143 time: 2235.0000000000005\n",
      "id: 8 x: 415 y: 138 time: 2235.0000000000005\n",
      "id: 4 x: 188 y: 152 time: 2268.3333333333335\n",
      "id: 8 x: 187 y: 142 time: 2268.3333333333335\n",
      "id: 4 x: 417 y: 146 time: 2268.3333333333335\n",
      "id: 8 x: 414 y: 140 time: 2268.3333333333335\n",
      "id: 4 x: 186 y: 151 time: 2301.666666666667\n",
      "id: 8 x: 185 y: 144 time: 2301.666666666667\n",
      "id: 4 x: 417 y: 146 time: 2301.666666666667\n",
      "id: 8 x: 414 y: 140 time: 2301.666666666667\n",
      "id: 4 x: 184 y: 152 time: 2335.0\n",
      "id: 8 x: 184 y: 145 time: 2335.0\n",
      "id: 4 x: 417 y: 146 time: 2335.0\n",
      "id: 8 x: 414 y: 140 time: 2335.0\n",
      "id: 4 x: 183 y: 153 time: 2368.3333333333335\n",
      "id: 8 x: 184 y: 146 time: 2368.3333333333335\n",
      "id: 4 x: 416 y: 146 time: 2368.3333333333335\n",
      "id: 8 x: 413 y: 140 time: 2368.3333333333335\n",
      "id: 4 x: 183 y: 154 time: 2401.666666666667\n",
      "id: 8 x: 183 y: 146 time: 2401.666666666667\n",
      "id: 4 x: 417 y: 147 time: 2401.666666666667\n",
      "id: 8 x: 413 y: 139 time: 2401.666666666667\n",
      "id: 4 x: 183 y: 154 time: 2435.0\n",
      "id: 8 x: 183 y: 146 time: 2435.0\n",
      "id: 4 x: 416 y: 148 time: 2435.0\n",
      "id: 8 x: 412 y: 138 time: 2435.0\n",
      "id: 4 x: 186 y: 155 time: 2468.333333333334\n",
      "id: 8 x: 186 y: 144 time: 2468.333333333334\n",
      "id: 4 x: 413 y: 149 time: 2468.333333333334\n",
      "id: 8 x: 409 y: 122 time: 2468.333333333334\n",
      "id: 4 x: 188 y: 156 time: 2501.666666666667\n",
      "id: 8 x: 187 y: 143 time: 2501.666666666667\n",
      "id: 4 x: 410 y: 152 time: 2501.666666666667\n",
      "id: 8 x: 409 y: 112 time: 2501.666666666667\n",
      "id: 4 x: 189 y: 157 time: 2535.0\n",
      "id: 8 x: 187 y: 143 time: 2535.0\n",
      "id: 4 x: 409 y: 152 time: 2535.0\n",
      "id: 8 x: 411 y: 109 time: 2535.0\n",
      "id: 4 x: 192 y: 156 time: 2568.3333333333335\n",
      "id: 8 x: 188 y: 140 time: 2568.3333333333335\n",
      "id: 4 x: 406 y: 152 time: 2568.3333333333335\n",
      "id: 8 x: 416 y: 103 time: 2568.3333333333335\n",
      "id: 4 x: 194 y: 156 time: 2601.666666666667\n",
      "id: 8 x: 189 y: 137 time: 2601.666666666667\n",
      "id: 4 x: 403 y: 152 time: 2601.666666666667\n",
      "id: 8 x: 419 y: 99 time: 2601.666666666667\n",
      "id: 4 x: 194 y: 157 time: 2635.0000000000005\n",
      "id: 8 x: 189 y: 136 time: 2635.0000000000005\n",
      "id: 4 x: 402 y: 153 time: 2635.0000000000005\n",
      "id: 8 x: 419 y: 98 time: 2635.0000000000005\n",
      "id: 4 x: 195 y: 157 time: 2668.3333333333335\n",
      "id: 8 x: 188 y: 132 time: 2668.3333333333335\n",
      "id: 4 x: 403 y: 153 time: 2668.3333333333335\n",
      "id: 8 x: 419 y: 97 time: 2668.3333333333335\n",
      "id: 4 x: 196 y: 157 time: 2701.6666666666665\n",
      "id: 8 x: 186 y: 127 time: 2701.6666666666665\n",
      "id: 4 x: 402 y: 153 time: 2701.6666666666665\n",
      "id: 8 x: 419 y: 97 time: 2701.6666666666665\n",
      "id: 4 x: 196 y: 157 time: 2735.0000000000005\n",
      "id: 8 x: 184 y: 124 time: 2735.0000000000005\n",
      "id: 4 x: 402 y: 153 time: 2735.0000000000005\n",
      "id: 8 x: 419 y: 97 time: 2735.0000000000005\n",
      "id: 4 x: 196 y: 157 time: 2768.3333333333335\n",
      "id: 8 x: 184 y: 124 time: 2768.3333333333335\n",
      "id: 4 x: 403 y: 152 time: 2768.3333333333335\n",
      "id: 8 x: 417 y: 98 time: 2768.3333333333335\n",
      "id: 4 x: 195 y: 157 time: 2801.666666666667\n",
      "id: 8 x: 184 y: 123 time: 2801.666666666667\n",
      "id: 4 x: 405 y: 150 time: 2801.666666666667\n",
      "id: 8 x: 413 y: 103 time: 2801.666666666667\n",
      "id: 4 x: 194 y: 156 time: 2835.0\n",
      "id: 8 x: 184 y: 125 time: 2835.0\n",
      "id: 4 x: 406 y: 149 time: 2835.0\n",
      "id: 8 x: 411 y: 109 time: 2835.0\n",
      "id: 4 x: 193 y: 156 time: 2868.3333333333335\n",
      "id: 8 x: 184 y: 130 time: 2868.3333333333335\n",
      "id: 4 x: 409 y: 147 time: 2868.3333333333335\n",
      "id: 8 x: 409 y: 114 time: 2868.3333333333335\n",
      "id: 4 x: 192 y: 155 time: 2901.666666666667\n",
      "id: 8 x: 185 y: 132 time: 2901.666666666667\n",
      "id: 4 x: 413 y: 146 time: 2901.666666666667\n",
      "id: 8 x: 411 y: 135 time: 2901.666666666667\n",
      "id: 4 x: 189 y: 155 time: 2935.0\n",
      "id: 8 x: 185 y: 137 time: 2935.0\n",
      "id: 4 x: 413 y: 144 time: 2935.0\n",
      "id: 8 x: 412 y: 138 time: 2935.0\n",
      "id: 4 x: 187 y: 155 time: 2968.333333333334\n",
      "id: 8 x: 185 y: 142 time: 2968.333333333334\n",
      "id: 4 x: 414 y: 143 time: 2968.333333333334\n",
      "id: 8 x: 413 y: 138 time: 2968.333333333334\n",
      "id: 4 x: 185 y: 154 time: 3001.666666666667\n",
      "id: 8 x: 184 y: 145 time: 3001.666666666667\n",
      "id: 4 x: 416 y: 144 time: 3001.666666666667\n",
      "id: 8 x: 413 y: 139 time: 3001.666666666667\n",
      "id: 4 x: 183 y: 154 time: 3035.0\n",
      "id: 8 x: 183 y: 146 time: 3035.0\n",
      "id: 4 x: 417 y: 146 time: 3035.0\n",
      "id: 8 x: 412 y: 140 time: 3035.0\n",
      "id: 4 x: 182 y: 154 time: 3068.3333333333335\n",
      "id: 8 x: 182 y: 147 time: 3068.3333333333335\n",
      "id: 4 x: 416 y: 146 time: 3068.3333333333335\n",
      "id: 8 x: 412 y: 140 time: 3068.3333333333335\n",
      "id: 4 x: 182 y: 155 time: 3101.666666666667\n",
      "id: 8 x: 182 y: 148 time: 3101.666666666667\n",
      "id: 4 x: 417 y: 146 time: 3101.666666666667\n",
      "id: 8 x: 413 y: 140 time: 3101.666666666667\n",
      "id: 4 x: 182 y: 155 time: 3135.0000000000005\n",
      "id: 8 x: 182 y: 148 time: 3135.0000000000005\n",
      "id: 4 x: 415 y: 144 time: 3135.0000000000005\n",
      "id: 8 x: 413 y: 138 time: 3135.0000000000005\n",
      "id: 4 x: 182 y: 154 time: 3168.3333333333335\n",
      "id: 8 x: 182 y: 147 time: 3168.3333333333335\n",
      "id: 4 x: 413 y: 146 time: 3168.3333333333335\n",
      "id: 8 x: 412 y: 130 time: 3168.3333333333335\n",
      "id: 4 x: 183 y: 155 time: 3201.6666666666665\n",
      "id: 8 x: 182 y: 147 time: 3201.6666666666665\n",
      "id: 4 x: 412 y: 149 time: 3201.6666666666665\n",
      "id: 8 x: 409 y: 114 time: 3201.6666666666665\n",
      "id: 4 x: 185 y: 155 time: 3235.0000000000005\n",
      "id: 8 x: 183 y: 147 time: 3235.0000000000005\n",
      "id: 4 x: 411 y: 150 time: 3235.0000000000005\n",
      "id: 8 x: 410 y: 109 time: 3235.0000000000005\n",
      "id: 4 x: 186 y: 156 time: 3268.3333333333335\n",
      "id: 8 x: 184 y: 146 time: 3268.3333333333335\n",
      "id: 4 x: 407 y: 152 time: 3268.3333333333335\n",
      "id: 8 x: 415 y: 103 time: 3268.3333333333335\n",
      "id: 4 x: 187 y: 156 time: 3301.666666666667\n",
      "id: 8 x: 184 y: 144 time: 3301.666666666667\n",
      "id: 4 x: 405 y: 152 time: 3301.666666666667\n",
      "id: 8 x: 417 y: 99 time: 3301.666666666667\n",
      "id: 4 x: 188 y: 156 time: 3335.0000000000005\n",
      "id: 8 x: 185 y: 141 time: 3335.0000000000005\n",
      "id: 4 x: 405 y: 153 time: 3335.0000000000005\n",
      "id: 8 x: 417 y: 98 time: 3335.0000000000005\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 192 y: 157 time: 3368.3333333333335\n",
      "id: 8 x: 186 y: 138 time: 3368.3333333333335\n",
      "id: 4 x: 404 y: 153 time: 3368.3333333333335\n",
      "id: 8 x: 415 y: 98 time: 3368.3333333333335\n",
      "id: 4 x: 192 y: 158 time: 3401.666666666667\n",
      "id: 8 x: 184 y: 134 time: 3401.666666666667\n",
      "id: 4 x: 401 y: 154 time: 3401.666666666667\n",
      "id: 8 x: 415 y: 98 time: 3401.666666666667\n",
      "id: 4 x: 193 y: 159 time: 3435.0\n",
      "id: 8 x: 183 y: 131 time: 3435.0\n",
      "id: 4 x: 399 y: 154 time: 3435.0\n",
      "id: 8 x: 416 y: 98 time: 3435.0\n",
      "id: 4 x: 194 y: 159 time: 3468.333333333334\n",
      "id: 8 x: 182 y: 129 time: 3468.333333333334\n",
      "id: 4 x: 400 y: 154 time: 3468.333333333334\n",
      "id: 8 x: 414 y: 100 time: 3468.333333333334\n",
      "id: 4 x: 193 y: 159 time: 3501.666666666667\n",
      "id: 8 x: 182 y: 131 time: 3501.666666666667\n",
      "id: 4 x: 403 y: 154 time: 3501.666666666667\n",
      "id: 8 x: 411 y: 103 time: 3501.666666666667\n",
      "id: 4 x: 193 y: 158 time: 3535.0\n",
      "id: 8 x: 182 y: 131 time: 3535.0\n",
      "id: 4 x: 403 y: 153 time: 3535.0\n",
      "id: 8 x: 410 y: 104 time: 3535.0\n",
      "id: 4 x: 192 y: 158 time: 3568.3333333333335\n",
      "id: 8 x: 183 y: 133 time: 3568.3333333333335\n",
      "id: 4 x: 407 y: 152 time: 3568.3333333333335\n",
      "id: 8 x: 408 y: 114 time: 3568.3333333333335\n",
      "id: 4 x: 187 y: 157 time: 3601.666666666667\n",
      "id: 8 x: 183 y: 140 time: 3601.666666666667\n",
      "id: 4 x: 411 y: 148 time: 3601.666666666667\n",
      "id: 8 x: 410 y: 140 time: 3601.666666666667\n",
      "id: 4 x: 183 y: 156 time: 3635.0000000000005\n",
      "id: 8 x: 183 y: 148 time: 3635.0000000000005\n",
      "id: 4 x: 412 y: 145 time: 3635.0000000000005\n",
      "id: 8 x: 411 y: 140 time: 3635.0000000000005\n",
      "id: 4 x: 182 y: 157 time: 3668.3333333333335\n",
      "id: 8 x: 182 y: 148 time: 3668.3333333333335\n",
      "id: 4 x: 411 y: 147 time: 3668.3333333333335\n",
      "id: 8 x: 411 y: 142 time: 3668.3333333333335\n",
      "id: 4 x: 182 y: 157 time: 3701.666666666667\n",
      "id: 8 x: 181 y: 150 time: 3701.666666666667\n",
      "id: 4 x: 411 y: 148 time: 3701.666666666667\n",
      "id: 8 x: 411 y: 143 time: 3701.666666666667\n",
      "id: 4 x: 180 y: 157 time: 3735.0000000000005\n",
      "id: 8 x: 180 y: 149 time: 3735.0000000000005\n",
      "id: 4 x: 412 y: 149 time: 3735.0000000000005\n",
      "id: 8 x: 410 y: 144 time: 3735.0000000000005\n",
      "id: 4 x: 179 y: 157 time: 3768.3333333333335\n",
      "id: 8 x: 179 y: 149 time: 3768.3333333333335\n",
      "id: 4 x: 412 y: 150 time: 3768.3333333333335\n",
      "id: 8 x: 410 y: 145 time: 3768.3333333333335\n",
      "id: 4 x: 178 y: 157 time: 3801.666666666667\n",
      "id: 8 x: 179 y: 150 time: 3801.666666666667\n",
      "id: 4 x: 413 y: 151 time: 3801.666666666667\n",
      "id: 8 x: 410 y: 146 time: 3801.666666666667\n",
      "id: 4 x: 178 y: 157 time: 3835.0000000000005\n",
      "id: 8 x: 178 y: 150 time: 3835.0000000000005\n",
      "id: 4 x: 414 y: 152 time: 3835.0000000000005\n",
      "id: 8 x: 410 y: 146 time: 3835.0000000000005\n",
      "id: 4 x: 177 y: 158 time: 3868.3333333333335\n",
      "id: 8 x: 178 y: 150 time: 3868.3333333333335\n",
      "id: 4 x: 412 y: 152 time: 3868.3333333333335\n",
      "id: 8 x: 408 y: 146 time: 3868.3333333333335\n",
      "id: 4 x: 179 y: 157 time: 3901.666666666667\n",
      "id: 8 x: 179 y: 149 time: 3901.666666666667\n",
      "id: 4 x: 412 y: 152 time: 3901.666666666667\n",
      "id: 8 x: 409 y: 144 time: 3901.666666666667\n",
      "id: 4 x: 181 y: 157 time: 3935.0\n",
      "id: 8 x: 180 y: 147 time: 3935.0\n",
      "id: 4 x: 408 y: 155 time: 3935.0\n",
      "id: 8 x: 409 y: 136 time: 3935.0\n",
      "id: 4 x: 182 y: 158 time: 3968.333333333334\n",
      "id: 8 x: 181 y: 146 time: 3968.333333333334\n",
      "id: 4 x: 406 y: 156 time: 3968.333333333334\n",
      "id: 8 x: 408 y: 121 time: 3968.333333333334\n",
      "id: 4 x: 184 y: 158 time: 4001.666666666667\n",
      "id: 8 x: 181 y: 144 time: 4001.666666666667\n",
      "id: 4 x: 403 y: 158 time: 4001.666666666667\n",
      "id: 8 x: 408 y: 112 time: 4001.666666666667\n",
      "id: 4 x: 187 y: 159 time: 4035.0\n",
      "id: 8 x: 181 y: 139 time: 4035.0\n",
      "id: 4 x: 402 y: 158 time: 4035.0\n",
      "id: 8 x: 414 y: 107 time: 4035.0\n",
      "id: 4 x: 189 y: 159 time: 4068.3333333333335\n",
      "id: 8 x: 181 y: 136 time: 4068.3333333333335\n",
      "id: 4 x: 401 y: 158 time: 4068.3333333333335\n",
      "id: 8 x: 416 y: 104 time: 4068.3333333333335\n",
      "id: 4 x: 189 y: 160 time: 4101.666666666667\n",
      "id: 8 x: 180 y: 134 time: 4101.666666666667\n",
      "id: 4 x: 400 y: 157 time: 4101.666666666667\n",
      "id: 8 x: 417 y: 102 time: 4101.666666666667\n",
      "id: 4 x: 191 y: 160 time: 4135.000000000001\n",
      "id: 8 x: 180 y: 133 time: 4135.000000000001\n",
      "id: 4 x: 399 y: 156 time: 4135.000000000001\n",
      "id: 8 x: 417 y: 101 time: 4135.000000000001\n",
      "id: 4 x: 192 y: 161 time: 4168.333333333334\n",
      "id: 8 x: 181 y: 133 time: 4168.333333333334\n",
      "id: 4 x: 399 y: 156 time: 4168.333333333334\n",
      "id: 8 x: 417 y: 100 time: 4168.333333333334\n",
      "id: 4 x: 194 y: 161 time: 4201.666666666667\n",
      "id: 8 x: 181 y: 132 time: 4201.666666666667\n",
      "id: 4 x: 399 y: 156 time: 4201.666666666667\n",
      "id: 8 x: 417 y: 100 time: 4201.666666666667\n",
      "id: 4 x: 194 y: 161 time: 4235.0\n",
      "id: 8 x: 182 y: 132 time: 4235.0\n",
      "id: 4 x: 400 y: 155 time: 4235.0\n",
      "id: 8 x: 415 y: 104 time: 4235.0\n",
      "id: 4 x: 192 y: 160 time: 4268.333333333334\n",
      "id: 8 x: 182 y: 133 time: 4268.333333333334\n",
      "id: 4 x: 403 y: 153 time: 4268.333333333334\n",
      "id: 8 x: 410 y: 111 time: 4268.333333333334\n",
      "id: 4 x: 193 y: 159 time: 4301.666666666667\n",
      "id: 8 x: 183 y: 133 time: 4301.666666666667\n",
      "id: 4 x: 404 y: 152 time: 4301.666666666667\n",
      "id: 8 x: 411 y: 112 time: 4301.666666666667\n",
      "id: 4 x: 193 y: 159 time: 4335.0\n",
      "id: 8 x: 183 y: 135 time: 4335.0\n",
      "id: 4 x: 407 y: 151 time: 4335.0\n",
      "id: 8 x: 409 y: 120 time: 4335.0\n",
      "id: 4 x: 191 y: 159 time: 4368.333333333333\n",
      "id: 8 x: 184 y: 138 time: 4368.333333333333\n",
      "id: 4 x: 412 y: 145 time: 4368.333333333333\n",
      "id: 8 x: 412 y: 140 time: 4368.333333333333\n",
      "id: 4 x: 188 y: 159 time: 4401.666666666667\n",
      "id: 8 x: 184 y: 143 time: 4401.666666666667\n",
      "id: 4 x: 413 y: 147 time: 4401.666666666667\n",
      "id: 8 x: 413 y: 143 time: 4401.666666666667\n",
      "id: 4 x: 184 y: 160 time: 4435.000000000001\n",
      "id: 8 x: 184 y: 149 time: 4435.000000000001\n",
      "id: 4 x: 415 y: 149 time: 4435.000000000001\n",
      "id: 8 x: 414 y: 145 time: 4435.000000000001\n",
      "id: 4 x: 182 y: 161 time: 4468.333333333334\n",
      "id: 8 x: 183 y: 152 time: 4468.333333333334\n",
      "id: 4 x: 416 y: 150 time: 4468.333333333334\n",
      "id: 8 x: 414 y: 147 time: 4468.333333333334\n",
      "id: 4 x: 181 y: 162 time: 4501.666666666667\n",
      "id: 8 x: 182 y: 153 time: 4501.666666666667\n",
      "id: 4 x: 417 y: 151 time: 4501.666666666667\n",
      "id: 8 x: 415 y: 148 time: 4501.666666666667\n",
      "id: 4 x: 181 y: 162 time: 4535.0\n",
      "id: 8 x: 182 y: 154 time: 4535.0\n",
      "id: 4 x: 417 y: 150 time: 4535.0\n",
      "id: 8 x: 415 y: 146 time: 4535.0\n",
      "id: 4 x: 182 y: 163 time: 4568.333333333333\n",
      "id: 8 x: 182 y: 154 time: 4568.333333333333\n",
      "id: 4 x: 418 y: 150 time: 4568.333333333333\n",
      "id: 8 x: 417 y: 144 time: 4568.333333333333\n",
      "id: 4 x: 182 y: 162 time: 4601.666666666667\n",
      "id: 8 x: 181 y: 154 time: 4601.666666666667\n",
      "id: 4 x: 418 y: 148 time: 4601.666666666667\n",
      "id: 8 x: 418 y: 143 time: 4601.666666666667\n",
      "id: 4 x: 182 y: 162 time: 4635.000000000001\n",
      "id: 8 x: 182 y: 154 time: 4635.000000000001\n",
      "id: 4 x: 419 y: 149 time: 4635.000000000001\n",
      "id: 8 x: 418 y: 142 time: 4635.000000000001\n",
      "id: 4 x: 184 y: 162 time: 4668.333333333334\n",
      "id: 8 x: 184 y: 153 time: 4668.333333333334\n",
      "id: 4 x: 417 y: 151 time: 4668.333333333334\n",
      "id: 8 x: 417 y: 137 time: 4668.333333333334\n",
      "id: 4 x: 187 y: 162 time: 4701.666666666667\n",
      "id: 8 x: 186 y: 151 time: 4701.666666666667\n",
      "id: 4 x: 413 y: 155 time: 4701.666666666667\n",
      "id: 8 x: 412 y: 120 time: 4701.666666666667\n",
      "id: 4 x: 190 y: 163 time: 4735.0\n",
      "id: 8 x: 188 y: 149 time: 4735.0\n",
      "id: 4 x: 410 y: 158 time: 4735.0\n",
      "id: 8 x: 412 y: 116 time: 4735.0\n",
      "id: 4 x: 192 y: 163 time: 4768.333333333334\n",
      "id: 8 x: 190 y: 147 time: 4768.333333333334\n",
      "id: 4 x: 409 y: 158 time: 4768.333333333334\n",
      "id: 8 x: 416 y: 112 time: 4768.333333333334\n",
      "id: 4 x: 197 y: 163 time: 4801.666666666667\n",
      "id: 8 x: 191 y: 143 time: 4801.666666666667\n",
      "id: 4 x: 406 y: 158 time: 4801.666666666667\n",
      "id: 8 x: 420 y: 106 time: 4801.666666666667\n",
      "id: 4 x: 199 y: 164 time: 4835.0\n",
      "id: 8 x: 189 y: 138 time: 4835.0\n",
      "id: 4 x: 404 y: 159 time: 4835.0\n",
      "id: 8 x: 423 y: 103 time: 4835.0\n",
      "id: 4 x: 200 y: 165 time: 4868.333333333334\n",
      "id: 8 x: 188 y: 136 time: 4868.333333333334\n",
      "id: 4 x: 405 y: 159 time: 4868.333333333334\n",
      "id: 8 x: 421 y: 103 time: 4868.333333333334\n",
      "id: 4 x: 200 y: 164 time: 4901.666666666667\n",
      "id: 8 x: 188 y: 135 time: 4901.666666666667\n",
      "id: 4 x: 406 y: 159 time: 4901.666666666667\n",
      "id: 8 x: 421 y: 102 time: 4901.666666666667\n",
      "id: 4 x: 200 y: 164 time: 4935.000000000001\n",
      "id: 8 x: 188 y: 135 time: 4935.000000000001\n",
      "id: 4 x: 405 y: 157 time: 4935.000000000001\n",
      "id: 8 x: 422 y: 102 time: 4935.000000000001\n",
      "id: 4 x: 200 y: 164 time: 4968.333333333334\n",
      "id: 8 x: 188 y: 134 time: 4968.333333333334\n",
      "id: 4 x: 408 y: 155 time: 4968.333333333334\n",
      "id: 8 x: 420 y: 104 time: 4968.333333333334\n",
      "id: 4 x: 199 y: 163 time: 5001.666666666667\n",
      "id: 8 x: 188 y: 135 time: 5001.666666666667\n",
      "id: 4 x: 410 y: 153 time: 5001.666666666667\n",
      "id: 8 x: 416 y: 111 time: 5001.666666666667\n",
      "id: 4 x: 197 y: 162 time: 5035.0\n",
      "id: 8 x: 188 y: 137 time: 5035.0\n",
      "id: 4 x: 413 y: 151 time: 5035.0\n",
      "id: 8 x: 416 y: 115 time: 5035.0\n",
      "id: 4 x: 195 y: 160 time: 5068.333333333333\n",
      "id: 8 x: 189 y: 139 time: 5068.333333333333\n",
      "id: 4 x: 416 y: 150 time: 5068.333333333333\n",
      "id: 8 x: 415 y: 125 time: 5068.333333333333\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 192 y: 161 time: 5101.666666666667\n",
      "id: 8 x: 189 y: 144 time: 5101.666666666667\n",
      "id: 4 x: 419 y: 147 time: 5101.666666666667\n",
      "id: 8 x: 417 y: 141 time: 5101.666666666667\n",
      "id: 4 x: 190 y: 162 time: 5135.000000000001\n",
      "id: 8 x: 190 y: 151 time: 5135.000000000001\n",
      "id: 4 x: 421 y: 149 time: 5135.000000000001\n",
      "id: 8 x: 419 y: 142 time: 5135.000000000001\n",
      "id: 4 x: 189 y: 163 time: 5168.333333333334\n",
      "id: 8 x: 190 y: 153 time: 5168.333333333334\n",
      "id: 4 x: 422 y: 150 time: 5168.333333333334\n",
      "id: 8 x: 419 y: 143 time: 5168.333333333334\n",
      "id: 4 x: 189 y: 164 time: 5201.666666666667\n",
      "id: 8 x: 190 y: 157 time: 5201.666666666667\n",
      "id: 4 x: 422 y: 151 time: 5201.666666666667\n",
      "id: 8 x: 419 y: 146 time: 5201.666666666667\n",
      "id: 4 x: 189 y: 164 time: 5235.0\n",
      "id: 8 x: 189 y: 156 time: 5235.0\n",
      "id: 4 x: 422 y: 151 time: 5235.0\n",
      "id: 8 x: 418 y: 146 time: 5235.0\n",
      "id: 4 x: 188 y: 164 time: 5268.333333333334\n",
      "id: 8 x: 189 y: 156 time: 5268.333333333334\n",
      "id: 4 x: 423 y: 151 time: 5268.333333333334\n",
      "id: 8 x: 418 y: 142 time: 5268.333333333334\n",
      "id: 4 x: 187 y: 164 time: 5301.666666666667\n",
      "id: 8 x: 188 y: 155 time: 5301.666666666667\n",
      "id: 4 x: 421 y: 150 time: 5301.666666666667\n",
      "id: 8 x: 418 y: 141 time: 5301.666666666667\n",
      "id: 4 x: 187 y: 164 time: 5335.0\n",
      "id: 8 x: 188 y: 155 time: 5335.0\n",
      "id: 4 x: 420 y: 149 time: 5335.0\n",
      "id: 8 x: 417 y: 140 time: 5335.0\n",
      "id: 4 x: 187 y: 163 time: 5368.333333333334\n",
      "id: 8 x: 187 y: 155 time: 5368.333333333334\n",
      "id: 4 x: 419 y: 150 time: 5368.333333333334\n",
      "id: 8 x: 417 y: 128 time: 5368.333333333334\n",
      "id: 4 x: 187 y: 162 time: 5401.666666666667\n",
      "id: 8 x: 187 y: 153 time: 5401.666666666667\n",
      "id: 4 x: 417 y: 154 time: 5401.666666666667\n",
      "id: 8 x: 416 y: 114 time: 5401.666666666667\n",
      "id: 4 x: 187 y: 161 time: 5435.000000000001\n",
      "id: 8 x: 186 y: 153 time: 5435.000000000001\n",
      "id: 4 x: 414 y: 155 time: 5435.000000000001\n",
      "id: 8 x: 417 y: 109 time: 5435.000000000001\n",
      "id: 4 x: 187 y: 161 time: 5468.333333333334\n",
      "id: 8 x: 186 y: 152 time: 5468.333333333334\n",
      "id: 4 x: 415 y: 154 time: 5468.333333333334\n",
      "id: 8 x: 419 y: 107 time: 5468.333333333334\n",
      "id: 4 x: 187 y: 160 time: 5501.666666666667\n",
      "id: 8 x: 186 y: 150 time: 5501.666666666667\n",
      "id: 4 x: 414 y: 154 time: 5501.666666666667\n",
      "id: 8 x: 421 y: 104 time: 5501.666666666667\n",
      "id: 4 x: 188 y: 160 time: 5535.0\n",
      "id: 8 x: 187 y: 148 time: 5535.0\n",
      "id: 4 x: 412 y: 154 time: 5535.0\n",
      "id: 8 x: 423 y: 102 time: 5535.0\n",
      "id: 4 x: 190 y: 161 time: 5568.333333333333\n",
      "id: 8 x: 187 y: 144 time: 5568.333333333333\n",
      "id: 4 x: 412 y: 154 time: 5568.333333333333\n",
      "id: 8 x: 422 y: 101 time: 5568.333333333333\n",
      "id: 4 x: 192 y: 161 time: 5601.666666666668\n",
      "id: 8 x: 187 y: 141 time: 5601.666666666668\n",
      "id: 4 x: 413 y: 152 time: 5601.666666666668\n",
      "id: 8 x: 418 y: 105 time: 5601.666666666668\n",
      "id: 4 x: 193 y: 161 time: 5635.000000000001\n",
      "id: 8 x: 186 y: 139 time: 5635.000000000001\n",
      "id: 4 x: 413 y: 150 time: 5635.000000000001\n",
      "id: 8 x: 417 y: 109 time: 5635.000000000001\n",
      "id: 4 x: 192 y: 161 time: 5668.333333333334\n",
      "id: 8 x: 186 y: 140 time: 5668.333333333334\n",
      "id: 4 x: 414 y: 148 time: 5668.333333333334\n",
      "id: 8 x: 414 y: 116 time: 5668.333333333334\n",
      "id: 4 x: 192 y: 161 time: 5701.666666666667\n",
      "id: 8 x: 186 y: 140 time: 5701.666666666667\n",
      "id: 4 x: 418 y: 147 time: 5701.666666666667\n",
      "id: 8 x: 416 y: 137 time: 5701.666666666667\n",
      "id: 4 x: 192 y: 161 time: 5735.0\n",
      "id: 8 x: 186 y: 142 time: 5735.0\n",
      "id: 4 x: 419 y: 145 time: 5735.0\n",
      "id: 8 x: 418 y: 139 time: 5735.0\n",
      "id: 4 x: 188 y: 161 time: 5768.333333333334\n",
      "id: 8 x: 186 y: 149 time: 5768.333333333334\n",
      "id: 4 x: 420 y: 146 time: 5768.333333333334\n",
      "id: 8 x: 418 y: 142 time: 5768.333333333334\n",
      "id: 4 x: 185 y: 160 time: 5801.666666666667\n",
      "id: 8 x: 185 y: 153 time: 5801.666666666667\n",
      "id: 4 x: 420 y: 147 time: 5801.666666666667\n",
      "id: 8 x: 418 y: 143 time: 5801.666666666667\n",
      "id: 4 x: 186 y: 161 time: 5835.0\n",
      "id: 8 x: 185 y: 153 time: 5835.0\n",
      "id: 4 x: 420 y: 147 time: 5835.0\n",
      "id: 8 x: 418 y: 144 time: 5835.0\n",
      "id: 4 x: 186 y: 161 time: 5868.333333333334\n",
      "id: 8 x: 184 y: 153 time: 5868.333333333334\n",
      "id: 4 x: 421 y: 147 time: 5868.333333333334\n",
      "id: 8 x: 419 y: 144 time: 5868.333333333334\n",
      "id: 4 x: 186 y: 161 time: 5901.666666666667\n",
      "id: 8 x: 184 y: 153 time: 5901.666666666667\n",
      "id: 4 x: 424 y: 148 time: 5901.666666666667\n",
      "id: 8 x: 419 y: 146 time: 5901.666666666667\n",
      "id: 4 x: 185 y: 161 time: 5935.000000000001\n",
      "id: 8 x: 184 y: 153 time: 5935.000000000001\n",
      "id: 4 x: 424 y: 149 time: 5935.000000000001\n",
      "id: 8 x: 419 y: 145 time: 5935.000000000001\n",
      "id: 4 x: 185 y: 161 time: 5968.333333333334\n",
      "id: 8 x: 184 y: 153 time: 5968.333333333334\n",
      "id: 4 x: 423 y: 149 time: 5968.333333333334\n",
      "id: 8 x: 420 y: 145 time: 5968.333333333334\n",
      "id: 4 x: 185 y: 161 time: 6001.666666666667\n",
      "id: 8 x: 185 y: 154 time: 6001.666666666667\n",
      "id: 4 x: 421 y: 149 time: 6001.666666666667\n",
      "id: 8 x: 418 y: 144 time: 6001.666666666667\n",
      "id: 4 x: 185 y: 161 time: 6035.0\n",
      "id: 8 x: 185 y: 154 time: 6035.0\n",
      "id: 4 x: 420 y: 153 time: 6035.0\n",
      "id: 8 x: 420 y: 134 time: 6035.0\n",
      "id: 4 x: 186 y: 162 time: 6068.333333333333\n",
      "id: 8 x: 185 y: 153 time: 6068.333333333333\n",
      "id: 4 x: 419 y: 155 time: 6068.333333333333\n",
      "id: 8 x: 420 y: 122 time: 6068.333333333333\n",
      "id: 4 x: 187 y: 162 time: 6101.666666666668\n",
      "id: 8 x: 187 y: 153 time: 6101.666666666668\n",
      "id: 4 x: 420 y: 155 time: 6101.666666666668\n",
      "id: 8 x: 420 y: 117 time: 6101.666666666668\n",
      "id: 4 x: 189 y: 162 time: 6135.000000000001\n",
      "id: 8 x: 187 y: 154 time: 6135.000000000001\n",
      "id: 4 x: 418 y: 155 time: 6135.000000000001\n",
      "id: 8 x: 420 y: 115 time: 6135.000000000001\n",
      "id: 4 x: 189 y: 162 time: 6168.333333333334\n",
      "id: 8 x: 187 y: 152 time: 6168.333333333334\n",
      "id: 4 x: 417 y: 154 time: 6168.333333333334\n",
      "id: 8 x: 421 y: 110 time: 6168.333333333334\n",
      "id: 4 x: 189 y: 162 time: 6201.666666666667\n",
      "id: 8 x: 185 y: 146 time: 6201.666666666667\n",
      "id: 4 x: 415 y: 153 time: 6201.666666666667\n",
      "id: 8 x: 423 y: 106 time: 6201.666666666667\n",
      "id: 4 x: 190 y: 162 time: 6235.0\n",
      "id: 8 x: 186 y: 143 time: 6235.0\n",
      "id: 4 x: 417 y: 152 time: 6235.0\n",
      "id: 8 x: 422 y: 104 time: 6235.0\n",
      "id: 4 x: 191 y: 162 time: 6268.333333333334\n",
      "id: 8 x: 185 y: 142 time: 6268.333333333334\n",
      "id: 4 x: 416 y: 152 time: 6268.333333333334\n",
      "id: 8 x: 421 y: 105 time: 6268.333333333334\n",
      "id: 4 x: 192 y: 161 time: 6301.666666666667\n",
      "id: 8 x: 185 y: 139 time: 6301.666666666667\n",
      "id: 4 x: 413 y: 151 time: 6301.666666666667\n",
      "id: 8 x: 421 y: 103 time: 6301.666666666667\n",
      "id: 4 x: 193 y: 161 time: 6336.666666666667\n",
      "id: 8 x: 185 y: 139 time: 6336.666666666667\n",
      "id: 4 x: 414 y: 150 time: 6336.666666666667\n",
      "id: 8 x: 421 y: 105 time: 6336.666666666667\n",
      "id: 4 x: 192 y: 161 time: 6370.0\n",
      "id: 8 x: 186 y: 142 time: 6370.0\n",
      "id: 4 x: 417 y: 147 time: 6370.0\n",
      "id: 8 x: 417 y: 118 time: 6370.0\n",
      "id: 4 x: 192 y: 160 time: 6403.333333333333\n",
      "id: 8 x: 186 y: 143 time: 6403.333333333333\n",
      "id: 4 x: 419 y: 144 time: 6403.333333333333\n",
      "id: 8 x: 418 y: 132 time: 6403.333333333333\n",
      "id: 4 x: 191 y: 160 time: 6436.666666666668\n",
      "id: 8 x: 185 y: 143 time: 6436.666666666668\n",
      "id: 4 x: 420 y: 143 time: 6436.666666666668\n",
      "id: 8 x: 418 y: 133 time: 6436.666666666668\n",
      "id: 4 x: 191 y: 160 time: 6470.000000000001\n",
      "id: 8 x: 185 y: 145 time: 6470.000000000001\n",
      "id: 4 x: 420 y: 141 time: 6470.000000000001\n",
      "id: 8 x: 419 y: 135 time: 6470.000000000001\n",
      "id: 4 x: 188 y: 161 time: 6503.333333333334\n",
      "id: 8 x: 186 y: 152 time: 6503.333333333334\n",
      "id: 4 x: 423 y: 145 time: 6503.333333333334\n",
      "id: 8 x: 419 y: 136 time: 6503.333333333334\n",
      "id: 4 x: 186 y: 161 time: 6536.666666666667\n",
      "id: 8 x: 185 y: 152 time: 6536.666666666667\n",
      "id: 4 x: 422 y: 143 time: 6536.666666666667\n",
      "id: 8 x: 419 y: 136 time: 6536.666666666667\n",
      "id: 4 x: 185 y: 162 time: 6570.0\n",
      "id: 8 x: 184 y: 154 time: 6570.0\n",
      "id: 4 x: 423 y: 144 time: 6570.0\n",
      "id: 8 x: 420 y: 136 time: 6570.0\n",
      "id: 4 x: 185 y: 162 time: 6603.333333333334\n",
      "id: 8 x: 184 y: 155 time: 6603.333333333334\n",
      "id: 4 x: 423 y: 144 time: 6603.333333333334\n",
      "id: 8 x: 420 y: 138 time: 6603.333333333334\n",
      "id: 4 x: 184 y: 162 time: 6636.666666666667\n",
      "id: 8 x: 184 y: 154 time: 6636.666666666667\n",
      "id: 4 x: 423 y: 145 time: 6636.666666666667\n",
      "id: 8 x: 420 y: 137 time: 6636.666666666667\n",
      "id: 4 x: 184 y: 161 time: 6670.000000000001\n",
      "id: 8 x: 183 y: 153 time: 6670.000000000001\n",
      "id: 4 x: 424 y: 144 time: 6670.000000000001\n",
      "id: 8 x: 420 y: 136 time: 6670.000000000001\n",
      "id: 4 x: 183 y: 161 time: 6703.333333333334\n",
      "id: 8 x: 183 y: 153 time: 6703.333333333334\n",
      "id: 4 x: 423 y: 145 time: 6703.333333333334\n",
      "id: 8 x: 420 y: 134 time: 6703.333333333334\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 184 y: 159 time: 6736.666666666667\n",
      "id: 8 x: 182 y: 151 time: 6736.666666666667\n",
      "id: 4 x: 421 y: 145 time: 6736.666666666667\n",
      "id: 8 x: 419 y: 124 time: 6736.666666666667\n",
      "id: 4 x: 183 y: 159 time: 6770.000000000001\n",
      "id: 8 x: 183 y: 151 time: 6770.000000000001\n",
      "id: 4 x: 420 y: 148 time: 6770.000000000001\n",
      "id: 8 x: 420 y: 116 time: 6770.000000000001\n",
      "id: 4 x: 184 y: 159 time: 6803.333333333334\n",
      "id: 8 x: 183 y: 150 time: 6803.333333333334\n",
      "id: 4 x: 419 y: 149 time: 6803.333333333334\n",
      "id: 8 x: 420 y: 113 time: 6803.333333333334\n",
      "id: 4 x: 186 y: 158 time: 6836.666666666667\n",
      "id: 8 x: 185 y: 149 time: 6836.666666666667\n",
      "id: 4 x: 417 y: 149 time: 6836.666666666667\n",
      "id: 8 x: 421 y: 110 time: 6836.666666666667\n",
      "id: 4 x: 187 y: 158 time: 6870.0\n",
      "id: 8 x: 185 y: 148 time: 6870.0\n",
      "id: 4 x: 414 y: 148 time: 6870.0\n",
      "id: 8 x: 423 y: 106 time: 6870.0\n",
      "id: 4 x: 187 y: 159 time: 6903.333333333334\n",
      "id: 8 x: 184 y: 144 time: 6903.333333333334\n",
      "id: 4 x: 413 y: 149 time: 6903.333333333334\n",
      "id: 8 x: 424 y: 103 time: 6903.333333333334\n",
      "id: 4 x: 188 y: 158 time: 6936.666666666668\n",
      "id: 8 x: 183 y: 141 time: 6936.666666666668\n",
      "id: 4 x: 413 y: 148 time: 6936.666666666668\n",
      "id: 8 x: 423 y: 102 time: 6936.666666666668\n",
      "id: 4 x: 189 y: 158 time: 6970.000000000001\n",
      "id: 8 x: 183 y: 140 time: 6970.000000000001\n",
      "id: 4 x: 413 y: 148 time: 6970.000000000001\n",
      "id: 8 x: 422 y: 101 time: 6970.000000000001\n",
      "id: 4 x: 189 y: 158 time: 7003.333333333334\n",
      "id: 8 x: 182 y: 139 time: 7003.333333333334\n",
      "id: 4 x: 412 y: 146 time: 7003.333333333334\n",
      "id: 8 x: 421 y: 101 time: 7003.333333333334\n",
      "id: 4 x: 189 y: 158 time: 7036.666666666667\n",
      "id: 8 x: 182 y: 139 time: 7036.666666666667\n",
      "id: 4 x: 412 y: 145 time: 7036.666666666667\n",
      "id: 8 x: 420 y: 102 time: 7036.666666666667\n",
      "id: 4 x: 188 y: 157 time: 7070.0\n",
      "id: 8 x: 181 y: 139 time: 7070.0\n",
      "id: 4 x: 413 y: 144 time: 7070.0\n",
      "id: 8 x: 419 y: 106 time: 7070.0\n",
      "id: 4 x: 187 y: 157 time: 7103.333333333334\n",
      "id: 8 x: 181 y: 139 time: 7103.333333333334\n",
      "id: 4 x: 414 y: 142 time: 7103.333333333334\n",
      "id: 8 x: 418 y: 110 time: 7103.333333333334\n",
      "id: 4 x: 185 y: 157 time: 7136.666666666667\n",
      "id: 8 x: 181 y: 141 time: 7136.666666666667\n",
      "id: 4 x: 415 y: 142 time: 7136.666666666667\n",
      "id: 8 x: 417 y: 120 time: 7136.666666666667\n",
      "id: 4 x: 184 y: 157 time: 7170.000000000001\n",
      "id: 8 x: 180 y: 141 time: 7170.000000000001\n",
      "id: 4 x: 419 y: 141 time: 7170.000000000001\n",
      "id: 8 x: 417 y: 124 time: 7170.000000000001\n",
      "id: 4 x: 182 y: 157 time: 7203.333333333334\n",
      "id: 8 x: 180 y: 144 time: 7203.333333333334\n",
      "id: 4 x: 425 y: 142 time: 7203.333333333334\n",
      "id: 8 x: 418 y: 131 time: 7203.333333333334\n",
      "id: 4 x: 181 y: 158 time: 7236.666666666667\n",
      "id: 8 x: 181 y: 147 time: 7236.666666666667\n",
      "id: 4 x: 426 y: 142 time: 7236.666666666667\n",
      "id: 8 x: 419 y: 132 time: 7236.666666666667\n",
      "id: 4 x: 181 y: 159 time: 7270.000000000001\n",
      "id: 8 x: 181 y: 149 time: 7270.000000000001\n",
      "id: 4 x: 427 y: 142 time: 7270.000000000001\n",
      "id: 8 x: 418 y: 133 time: 7270.000000000001\n",
      "id: 4 x: 181 y: 161 time: 7303.333333333334\n",
      "id: 8 x: 180 y: 152 time: 7303.333333333334\n",
      "id: 4 x: 426 y: 143 time: 7303.333333333334\n",
      "id: 8 x: 418 y: 134 time: 7303.333333333334\n",
      "id: 4 x: 179 y: 161 time: 7336.666666666667\n",
      "id: 8 x: 179 y: 153 time: 7336.666666666667\n",
      "id: 4 x: 425 y: 142 time: 7336.666666666667\n",
      "id: 8 x: 418 y: 134 time: 7336.666666666667\n",
      "id: 4 x: 179 y: 161 time: 7370.0\n",
      "id: 8 x: 179 y: 153 time: 7370.0\n",
      "id: 4 x: 424 y: 143 time: 7370.0\n",
      "id: 8 x: 417 y: 134 time: 7370.0\n",
      "id: 4 x: 179 y: 162 time: 7403.333333333334\n",
      "id: 8 x: 178 y: 153 time: 7403.333333333334\n",
      "id: 4 x: 422 y: 142 time: 7403.333333333334\n",
      "id: 8 x: 417 y: 133 time: 7403.333333333334\n",
      "id: 4 x: 178 y: 162 time: 7436.666666666668\n",
      "id: 8 x: 179 y: 154 time: 7436.666666666668\n",
      "id: 4 x: 422 y: 142 time: 7436.666666666668\n",
      "id: 8 x: 416 y: 132 time: 7436.666666666668\n",
      "id: 4 x: 179 y: 162 time: 7470.000000000001\n",
      "id: 8 x: 179 y: 154 time: 7470.000000000001\n",
      "id: 4 x: 420 y: 143 time: 7470.000000000001\n",
      "id: 8 x: 415 y: 131 time: 7470.000000000001\n",
      "id: 4 x: 178 y: 163 time: 7503.333333333334\n",
      "id: 8 x: 179 y: 154 time: 7503.333333333334\n",
      "id: 4 x: 417 y: 145 time: 7503.333333333334\n",
      "id: 8 x: 413 y: 123 time: 7503.333333333334\n",
      "id: 4 x: 180 y: 162 time: 7536.666666666667\n",
      "id: 8 x: 179 y: 153 time: 7536.666666666667\n",
      "id: 4 x: 414 y: 147 time: 7536.666666666667\n",
      "id: 8 x: 414 y: 119 time: 7536.666666666667\n",
      "id: 4 x: 180 y: 163 time: 7570.0\n",
      "id: 8 x: 179 y: 154 time: 7570.0\n",
      "id: 4 x: 413 y: 148 time: 7570.0\n",
      "id: 8 x: 414 y: 115 time: 7570.0\n",
      "id: 4 x: 180 y: 163 time: 7603.333333333334\n",
      "id: 8 x: 180 y: 154 time: 7603.333333333334\n",
      "id: 4 x: 411 y: 149 time: 7603.333333333334\n",
      "id: 8 x: 414 y: 111 time: 7603.333333333334\n",
      "id: 4 x: 180 y: 162 time: 7636.666666666667\n",
      "id: 8 x: 180 y: 153 time: 7636.666666666667\n",
      "id: 4 x: 410 y: 148 time: 7636.666666666667\n",
      "id: 8 x: 414 y: 109 time: 7636.666666666667\n",
      "id: 4 x: 181 y: 162 time: 7670.000000000001\n",
      "id: 8 x: 180 y: 153 time: 7670.000000000001\n",
      "id: 4 x: 410 y: 147 time: 7670.000000000001\n",
      "id: 8 x: 413 y: 110 time: 7670.000000000001\n",
      "id: 4 x: 181 y: 162 time: 7703.333333333334\n",
      "id: 8 x: 180 y: 151 time: 7703.333333333334\n",
      "id: 4 x: 411 y: 147 time: 7703.333333333334\n",
      "id: 8 x: 413 y: 112 time: 7703.333333333334\n",
      "id: 4 x: 182 y: 162 time: 7736.666666666667\n",
      "id: 8 x: 180 y: 148 time: 7736.666666666667\n",
      "id: 4 x: 411 y: 146 time: 7736.666666666667\n",
      "id: 8 x: 412 y: 114 time: 7736.666666666667\n",
      "id: 4 x: 182 y: 162 time: 7770.000000000001\n",
      "id: 8 x: 179 y: 147 time: 7770.000000000001\n",
      "id: 4 x: 412 y: 146 time: 7770.000000000001\n",
      "id: 8 x: 411 y: 118 time: 7770.000000000001\n",
      "id: 4 x: 182 y: 161 time: 7803.333333333334\n",
      "id: 8 x: 178 y: 146 time: 7803.333333333334\n",
      "id: 4 x: 412 y: 145 time: 7803.333333333334\n",
      "id: 8 x: 410 y: 124 time: 7803.333333333334\n",
      "id: 4 x: 182 y: 161 time: 7836.666666666667\n",
      "id: 8 x: 178 y: 147 time: 7836.666666666667\n",
      "id: 4 x: 414 y: 146 time: 7836.666666666667\n",
      "id: 8 x: 409 y: 133 time: 7836.666666666667\n",
      "id: 4 x: 181 y: 161 time: 7870.0\n",
      "id: 8 x: 178 y: 148 time: 7870.0\n",
      "id: 4 x: 416 y: 145 time: 7870.0\n",
      "id: 8 x: 410 y: 134 time: 7870.0\n",
      "id: 4 x: 180 y: 161 time: 7903.333333333334\n",
      "id: 8 x: 177 y: 149 time: 7903.333333333334\n",
      "id: 4 x: 416 y: 144 time: 7903.333333333334\n",
      "id: 8 x: 411 y: 134 time: 7903.333333333334\n",
      "id: 4 x: 178 y: 161 time: 7936.666666666668\n",
      "id: 8 x: 177 y: 151 time: 7936.666666666668\n",
      "id: 4 x: 417 y: 143 time: 7936.666666666668\n",
      "id: 8 x: 412 y: 134 time: 7936.666666666668\n",
      "id: 4 x: 177 y: 161 time: 7970.000000000001\n",
      "id: 8 x: 176 y: 151 time: 7970.000000000001\n",
      "id: 4 x: 417 y: 142 time: 7970.000000000001\n",
      "id: 8 x: 412 y: 133 time: 7970.000000000001\n",
      "id: 4 x: 175 y: 161 time: 8003.333333333334\n",
      "id: 8 x: 175 y: 154 time: 8003.333333333334\n",
      "id: 4 x: 418 y: 142 time: 8003.333333333334\n",
      "id: 8 x: 412 y: 133 time: 8003.333333333334\n",
      "id: 4 x: 175 y: 162 time: 8036.666666666667\n",
      "id: 8 x: 175 y: 154 time: 8036.666666666667\n",
      "id: 4 x: 417 y: 142 time: 8036.666666666667\n",
      "id: 8 x: 413 y: 133 time: 8036.666666666667\n",
      "id: 4 x: 174 y: 162 time: 8070.0\n",
      "id: 8 x: 174 y: 154 time: 8070.0\n",
      "id: 4 x: 417 y: 142 time: 8070.0\n",
      "id: 8 x: 413 y: 133 time: 8070.0\n",
      "id: 4 x: 174 y: 162 time: 8103.333333333334\n",
      "id: 8 x: 174 y: 153 time: 8103.333333333334\n",
      "id: 4 x: 416 y: 142 time: 8103.333333333334\n",
      "id: 8 x: 413 y: 133 time: 8103.333333333334\n",
      "id: 4 x: 174 y: 162 time: 8136.666666666667\n",
      "id: 8 x: 174 y: 155 time: 8136.666666666667\n",
      "id: 4 x: 416 y: 144 time: 8136.666666666667\n",
      "id: 8 x: 412 y: 131 time: 8136.666666666667\n",
      "id: 4 x: 174 y: 162 time: 8170.0\n",
      "id: 8 x: 174 y: 154 time: 8170.0\n",
      "id: 4 x: 415 y: 144 time: 8170.0\n",
      "id: 8 x: 412 y: 129 time: 8170.0\n",
      "id: 4 x: 174 y: 162 time: 8203.333333333334\n",
      "id: 8 x: 174 y: 155 time: 8203.333333333334\n",
      "id: 4 x: 414 y: 144 time: 8203.333333333334\n",
      "id: 8 x: 412 y: 130 time: 8203.333333333334\n",
      "id: 4 x: 174 y: 163 time: 8236.666666666666\n",
      "id: 8 x: 173 y: 155 time: 8236.666666666666\n",
      "id: 4 x: 412 y: 145 time: 8236.666666666666\n",
      "id: 8 x: 412 y: 127 time: 8236.666666666666\n",
      "id: 4 x: 174 y: 163 time: 8270.000000000002\n",
      "id: 8 x: 173 y: 156 time: 8270.000000000002\n",
      "id: 4 x: 412 y: 146 time: 8270.000000000002\n",
      "id: 8 x: 412 y: 123 time: 8270.000000000002\n",
      "id: 4 x: 173 y: 163 time: 8303.333333333334\n",
      "id: 8 x: 173 y: 155 time: 8303.333333333334\n",
      "id: 4 x: 412 y: 146 time: 8303.333333333334\n",
      "id: 8 x: 412 y: 120 time: 8303.333333333334\n",
      "id: 4 x: 173 y: 163 time: 8336.666666666668\n",
      "id: 8 x: 173 y: 155 time: 8336.666666666668\n",
      "id: 4 x: 412 y: 146 time: 8336.666666666668\n",
      "id: 8 x: 412 y: 119 time: 8336.666666666668\n",
      "id: 4 x: 173 y: 162 time: 8370.000000000002\n",
      "id: 8 x: 173 y: 154 time: 8370.000000000002\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 4 x: 411 y: 146 time: 8370.000000000002\n",
      "id: 8 x: 413 y: 117 time: 8370.000000000002\n",
      "id: 4 x: 174 y: 162 time: 8403.333333333334\n",
      "id: 8 x: 173 y: 154 time: 8403.333333333334\n",
      "id: 4 x: 411 y: 146 time: 8403.333333333334\n",
      "id: 8 x: 414 y: 113 time: 8403.333333333334\n",
      "id: 4 x: 174 y: 162 time: 8436.666666666668\n",
      "id: 8 x: 173 y: 154 time: 8436.666666666668\n",
      "id: 4 x: 411 y: 145 time: 8436.666666666668\n",
      "id: 8 x: 413 y: 112 time: 8436.666666666668\n",
      "id: 4 x: 176 y: 161 time: 8470.0\n",
      "id: 8 x: 172 y: 150 time: 8470.0\n",
      "id: 4 x: 410 y: 145 time: 8470.0\n",
      "id: 8 x: 413 y: 112 time: 8470.0\n",
      "id: 4 x: 178 y: 161 time: 8503.333333333334\n",
      "id: 8 x: 172 y: 146 time: 8503.333333333334\n",
      "id: 4 x: 409 y: 145 time: 8503.333333333334\n",
      "id: 8 x: 413 y: 112 time: 8503.333333333334\n",
      "id: 4 x: 178 y: 161 time: 8536.666666666668\n",
      "id: 8 x: 172 y: 145 time: 8536.666666666668\n",
      "id: 4 x: 409 y: 145 time: 8536.666666666668\n",
      "id: 8 x: 412 y: 113 time: 8536.666666666668\n",
      "id: 4 x: 179 y: 161 time: 8570.0\n",
      "id: 8 x: 172 y: 144 time: 8570.0\n",
      "id: 4 x: 409 y: 145 time: 8570.0\n",
      "id: 8 x: 410 y: 122 time: 8570.0\n",
      "id: 4 x: 180 y: 160 time: 8603.333333333334\n",
      "id: 8 x: 173 y: 144 time: 8603.333333333334\n",
      "id: 4 x: 409 y: 145 time: 8603.333333333334\n",
      "id: 8 x: 410 y: 134 time: 8603.333333333334\n",
      "id: 4 x: 180 y: 160 time: 8636.666666666666\n",
      "id: 8 x: 173 y: 144 time: 8636.666666666666\n",
      "id: 4 x: 411 y: 145 time: 8636.666666666666\n",
      "id: 8 x: 410 y: 134 time: 8636.666666666666\n",
      "id: 4 x: 179 y: 160 time: 8670.0\n",
      "id: 8 x: 175 y: 147 time: 8670.0\n",
      "id: 4 x: 412 y: 143 time: 8670.0\n",
      "id: 8 x: 411 y: 136 time: 8670.0\n",
      "id: 4 x: 179 y: 160 time: 8703.333333333334\n",
      "id: 8 x: 175 y: 148 time: 8703.333333333334\n",
      "id: 4 x: 413 y: 143 time: 8703.333333333334\n",
      "id: 8 x: 412 y: 137 time: 8703.333333333334\n",
      "id: 4 x: 179 y: 159 time: 8736.666666666666\n",
      "id: 8 x: 175 y: 147 time: 8736.666666666666\n",
      "id: 4 x: 414 y: 144 time: 8736.666666666666\n",
      "id: 8 x: 412 y: 137 time: 8736.666666666666\n",
      "id: 4 x: 178 y: 159 time: 8770.000000000002\n",
      "id: 8 x: 176 y: 149 time: 8770.000000000002\n",
      "id: 4 x: 413 y: 143 time: 8770.000000000002\n",
      "id: 8 x: 412 y: 136 time: 8770.000000000002\n",
      "id: 4 x: 176 y: 159 time: 8803.333333333334\n",
      "id: 8 x: 175 y: 151 time: 8803.333333333334\n",
      "id: 4 x: 414 y: 144 time: 8803.333333333334\n",
      "id: 8 x: 413 y: 136 time: 8803.333333333334\n",
      "id: 4 x: 176 y: 160 time: 8836.666666666668\n",
      "id: 8 x: 176 y: 151 time: 8836.666666666668\n",
      "id: 4 x: 414 y: 144 time: 8836.666666666668\n",
      "id: 8 x: 413 y: 137 time: 8836.666666666668\n",
      "id: 4 x: 177 y: 160 time: 8870.000000000002\n",
      "id: 8 x: 176 y: 152 time: 8870.000000000002\n",
      "id: 4 x: 414 y: 145 time: 8870.000000000002\n",
      "id: 8 x: 413 y: 136 time: 8870.000000000002\n",
      "id: 4 x: 177 y: 161 time: 8903.333333333334\n",
      "id: 8 x: 176 y: 152 time: 8903.333333333334\n",
      "id: 4 x: 415 y: 145 time: 8903.333333333334\n",
      "id: 8 x: 413 y: 137 time: 8903.333333333334\n",
      "id: 4 x: 177 y: 161 time: 8936.666666666668\n",
      "id: 8 x: 177 y: 153 time: 8936.666666666668\n",
      "id: 4 x: 415 y: 145 time: 8936.666666666668\n",
      "id: 8 x: 413 y: 137 time: 8936.666666666668\n",
      "id: 4 x: 178 y: 160 time: 8970.0\n",
      "id: 8 x: 177 y: 152 time: 8970.0\n",
      "id: 4 x: 415 y: 145 time: 8970.0\n",
      "id: 8 x: 414 y: 137 time: 8970.0\n",
      "id: 4 x: 179 y: 160 time: 9003.333333333334\n",
      "id: 8 x: 179 y: 153 time: 9003.333333333334\n",
      "id: 4 x: 413 y: 148 time: 9003.333333333334\n",
      "id: 8 x: 415 y: 133 time: 9003.333333333334\n",
      "id: 4 x: 179 y: 161 time: 9036.666666666668\n",
      "id: 8 x: 180 y: 152 time: 9036.666666666668\n",
      "id: 4 x: 411 y: 150 time: 9036.666666666668\n",
      "id: 8 x: 414 y: 122 time: 9036.666666666668\n",
      "id: 4 x: 180 y: 161 time: 9070.0\n",
      "id: 8 x: 180 y: 152 time: 9070.0\n",
      "id: 4 x: 409 y: 153 time: 9070.0\n",
      "id: 8 x: 415 y: 116 time: 9070.0\n",
      "id: 4 x: 183 y: 161 time: 9103.333333333334\n",
      "id: 8 x: 180 y: 149 time: 9103.333333333334\n",
      "id: 4 x: 408 y: 154 time: 9103.333333333334\n",
      "id: 8 x: 416 y: 112 time: 9103.333333333334\n",
      "id: 4 x: 186 y: 160 time: 9136.666666666666\n",
      "id: 8 x: 179 y: 145 time: 9136.666666666666\n",
      "id: 4 x: 406 y: 154 time: 9136.666666666666\n",
      "id: 8 x: 419 y: 109 time: 9136.666666666666\n",
      "id: 4 x: 186 y: 160 time: 9170.0\n",
      "id: 8 x: 180 y: 145 time: 9170.0\n",
      "id: 4 x: 405 y: 155 time: 9170.0\n",
      "id: 8 x: 420 y: 106 time: 9170.0\n",
      "id: 4 x: 186 y: 161 time: 9203.333333333334\n",
      "id: 8 x: 179 y: 144 time: 9203.333333333334\n",
      "id: 4 x: 406 y: 155 time: 9203.333333333334\n",
      "id: 8 x: 420 y: 105 time: 9203.333333333334\n",
      "id: 4 x: 187 y: 161 time: 9236.666666666668\n",
      "id: 8 x: 180 y: 143 time: 9236.666666666668\n",
      "id: 4 x: 406 y: 154 time: 9236.666666666668\n",
      "id: 8 x: 420 y: 104 time: 9236.666666666668\n",
      "id: 4 x: 187 y: 160 time: 9270.000000000002\n",
      "id: 8 x: 180 y: 143 time: 9270.000000000002\n",
      "id: 4 x: 406 y: 153 time: 9270.000000000002\n",
      "id: 8 x: 420 y: 104 time: 9270.000000000002\n",
      "id: 4 x: 187 y: 160 time: 9303.333333333334\n",
      "id: 8 x: 179 y: 141 time: 9303.333333333334\n",
      "id: 4 x: 405 y: 152 time: 9303.333333333334\n",
      "id: 8 x: 421 y: 103 time: 9303.333333333334\n",
      "id: 4 x: 187 y: 160 time: 9336.666666666668\n",
      "id: 8 x: 180 y: 142 time: 9336.666666666668\n",
      "id: 4 x: 409 y: 151 time: 9336.666666666668\n",
      "id: 8 x: 419 y: 108 time: 9336.666666666668\n",
      "id: 4 x: 187 y: 160 time: 9370.000000000002\n",
      "id: 8 x: 180 y: 144 time: 9370.000000000002\n",
      "id: 4 x: 410 y: 149 time: 9370.000000000002\n",
      "id: 8 x: 416 y: 117 time: 9370.000000000002\n",
      "id: 4 x: 186 y: 159 time: 9403.333333333334\n",
      "id: 8 x: 180 y: 145 time: 9403.333333333334\n",
      "id: 4 x: 411 y: 147 time: 9403.333333333334\n",
      "id: 8 x: 416 y: 120 time: 9403.333333333334\n",
      "id: 4 x: 186 y: 160 time: 9436.666666666668\n",
      "id: 8 x: 181 y: 146 time: 9436.666666666668\n",
      "id: 4 x: 413 y: 146 time: 9436.666666666668\n",
      "id: 8 x: 415 y: 120 time: 9436.666666666668\n",
      "id: 4 x: 185 y: 160 time: 9470.0\n",
      "id: 8 x: 182 y: 150 time: 9470.0\n",
      "id: 4 x: 416 y: 146 time: 9470.0\n",
      "id: 8 x: 415 y: 127 time: 9470.0\n",
      "id: 4 x: 184 y: 161 time: 9503.333333333334\n",
      "id: 8 x: 183 y: 154 time: 9503.333333333334\n",
      "id: 4 x: 419 y: 146 time: 9503.333333333334\n",
      "id: 8 x: 414 y: 134 time: 9503.333333333334\n",
      "id: 4 x: 184 y: 163 time: 9536.666666666668\n",
      "id: 8 x: 183 y: 155 time: 9536.666666666668\n",
      "id: 4 x: 420 y: 147 time: 9536.666666666668\n",
      "id: 8 x: 416 y: 137 time: 9536.666666666668\n",
      "id: 4 x: 184 y: 163 time: 9570.0\n",
      "id: 8 x: 184 y: 157 time: 9570.0\n",
      "id: 4 x: 421 y: 147 time: 9570.0\n",
      "id: 8 x: 416 y: 138 time: 9570.0\n",
      "id: 4 x: 184 y: 164 time: 9603.333333333334\n",
      "id: 8 x: 183 y: 158 time: 9603.333333333334\n",
      "id: 4 x: 422 y: 148 time: 9603.333333333334\n",
      "id: 8 x: 416 y: 138 time: 9603.333333333334\n",
      "id: 4 x: 184 y: 165 time: 9636.666666666666\n",
      "id: 8 x: 184 y: 159 time: 9636.666666666666\n",
      "id: 4 x: 422 y: 147 time: 9636.666666666666\n",
      "id: 8 x: 416 y: 138 time: 9636.666666666666\n",
      "id: 4 x: 185 y: 165 time: 9670.0\n",
      "id: 8 x: 183 y: 158 time: 9670.0\n",
      "id: 4 x: 423 y: 148 time: 9670.0\n",
      "id: 8 x: 417 y: 139 time: 9670.0\n",
      "id: 4 x: 184 y: 165 time: 9703.333333333334\n",
      "id: 8 x: 184 y: 159 time: 9703.333333333334\n",
      "id: 4 x: 423 y: 147 time: 9703.333333333334\n",
      "id: 8 x: 416 y: 139 time: 9703.333333333334\n",
      "id: 4 x: 184 y: 165 time: 9736.666666666668\n",
      "id: 8 x: 183 y: 158 time: 9736.666666666668\n",
      "id: 4 x: 422 y: 146 time: 9736.666666666668\n",
      "id: 8 x: 416 y: 138 time: 9736.666666666668\n",
      "id: 4 x: 183 y: 165 time: 9770.000000000002\n",
      "id: 8 x: 183 y: 159 time: 9770.000000000002\n",
      "id: 4 x: 422 y: 145 time: 9770.000000000002\n",
      "id: 8 x: 417 y: 136 time: 9770.000000000002\n",
      "id: 4 x: 183 y: 164 time: 9803.333333333334\n",
      "id: 8 x: 183 y: 157 time: 9803.333333333334\n",
      "id: 4 x: 421 y: 144 time: 9803.333333333334\n",
      "id: 8 x: 417 y: 134 time: 9803.333333333334\n",
      "id: 4 x: 184 y: 164 time: 9836.666666666668\n",
      "id: 8 x: 184 y: 157 time: 9836.666666666668\n",
      "id: 4 x: 419 y: 144 time: 9836.666666666668\n",
      "id: 8 x: 418 y: 129 time: 9836.666666666668\n",
      "id: 4 x: 186 y: 163 time: 9870.000000000002\n",
      "id: 8 x: 184 y: 155 time: 9870.000000000002\n",
      "id: 4 x: 418 y: 146 time: 9870.000000000002\n",
      "id: 8 x: 417 y: 122 time: 9870.000000000002\n",
      "id: 4 x: 186 y: 162 time: 9903.333333333334\n",
      "id: 8 x: 185 y: 156 time: 9903.333333333334\n",
      "id: 4 x: 418 y: 147 time: 9903.333333333334\n",
      "id: 8 x: 418 y: 117 time: 9903.333333333334\n",
      "id: 4 x: 186 y: 162 time: 9936.666666666668\n",
      "id: 8 x: 185 y: 156 time: 9936.666666666668\n",
      "id: 4 x: 416 y: 149 time: 9936.666666666668\n",
      "id: 8 x: 418 y: 114 time: 9936.666666666668\n",
      "id: 4 x: 186 y: 161 time: 9970.0\n",
      "id: 8 x: 184 y: 155 time: 9970.0\n",
      "id: 4 x: 414 y: 150 time: 9970.0\n",
      "id: 8 x: 419 y: 112 time: 9970.0\n",
      "id: 4 x: 189 y: 161 time: 10003.333333333334\n",
      "id: 8 x: 183 y: 148 time: 10003.333333333334\n",
      "id: 4 x: 413 y: 150 time: 10003.333333333334\n",
      "id: 8 x: 419 y: 111 time: 10003.333333333334\n",
      "id: 4 x: 190 y: 161 time: 10036.666666666668\n",
      "id: 8 x: 182 y: 144 time: 10036.666666666668\n",
      "id: 4 x: 413 y: 150 time: 10036.666666666668\n",
      "id: 8 x: 419 y: 110 time: 10036.666666666668\n",
      "id: 4 x: 190 y: 161 time: 10070.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id: 8 x: 181 y: 142 time: 10070.0\n",
      "id: 4 x: 412 y: 150 time: 10070.0\n",
      "id: 8 x: 420 y: 109 time: 10070.0\n",
      "id: 4 x: 189 y: 161 time: 10103.333333333334\n",
      "id: 8 x: 181 y: 141 time: 10103.333333333334\n",
      "id: 4 x: 412 y: 149 time: 10103.333333333334\n",
      "id: 8 x: 419 y: 111 time: 10103.333333333334\n",
      "id: 4 x: 189 y: 161 time: 10136.666666666666\n",
      "id: 8 x: 181 y: 141 time: 10136.666666666666\n",
      "id: 4 x: 412 y: 149 time: 10136.666666666666\n",
      "id: 8 x: 418 y: 113 time: 10136.666666666666\n",
      "id: 4 x: 188 y: 161 time: 10170.0\n",
      "id: 8 x: 181 y: 142 time: 10170.0\n",
      "id: 4 x: 412 y: 149 time: 10170.0\n",
      "id: 8 x: 417 y: 118 time: 10170.0\n",
      "id: 4 x: 188 y: 160 time: 10203.333333333334\n",
      "id: 8 x: 181 y: 142 time: 10203.333333333334\n",
      "id: 4 x: 413 y: 148 time: 10203.333333333334\n",
      "id: 8 x: 417 y: 119 time: 10203.333333333334\n",
      "id: 4 x: 187 y: 160 time: 10236.666666666668\n",
      "id: 8 x: 181 y: 143 time: 10236.666666666668\n",
      "id: 4 x: 414 y: 146 time: 10236.666666666668\n",
      "id: 8 x: 416 y: 123 time: 10236.666666666668\n",
      "id: 4 x: 185 y: 161 time: 10270.000000000002\n",
      "id: 8 x: 181 y: 145 time: 10270.000000000002\n",
      "id: 4 x: 417 y: 147 time: 10270.000000000002\n",
      "id: 8 x: 415 y: 131 time: 10270.000000000002\n",
      "id: 4 x: 183 y: 161 time: 10303.333333333334\n",
      "id: 8 x: 181 y: 148 time: 10303.333333333334\n",
      "id: 4 x: 419 y: 147 time: 10303.333333333334\n",
      "id: 8 x: 415 y: 136 time: 10303.333333333334\n",
      "id: 4 x: 183 y: 161 time: 10336.666666666668\n",
      "id: 8 x: 182 y: 152 time: 10336.666666666668\n",
      "id: 4 x: 420 y: 147 time: 10336.666666666668\n",
      "id: 8 x: 416 y: 138 time: 10336.666666666668\n",
      "id: 4 x: 183 y: 162 time: 10370.000000000002\n",
      "id: 8 x: 183 y: 154 time: 10370.000000000002\n",
      "id: 4 x: 421 y: 149 time: 10370.000000000002\n",
      "id: 8 x: 415 y: 140 time: 10370.000000000002\n",
      "id: 4 x: 181 y: 163 time: 10403.333333333334\n",
      "id: 8 x: 182 y: 156 time: 10403.333333333334\n",
      "id: 4 x: 420 y: 150 time: 10403.333333333334\n",
      "id: 8 x: 414 y: 141 time: 10403.333333333334\n",
      "id: 4 x: 181 y: 164 time: 10436.666666666668\n",
      "id: 8 x: 182 y: 157 time: 10436.666666666668\n",
      "id: 4 x: 419 y: 149 time: 10436.666666666668\n",
      "id: 8 x: 414 y: 141 time: 10436.666666666668\n",
      "id: 4 x: 181 y: 164 time: 10470.0\n",
      "id: 8 x: 181 y: 156 time: 10470.0\n",
      "id: 4 x: 419 y: 149 time: 10470.0\n",
      "id: 8 x: 414 y: 140 time: 10470.0\n",
      "id: 4 x: 181 y: 165 time: 10503.333333333334\n",
      "id: 8 x: 182 y: 158 time: 10503.333333333334\n",
      "id: 4 x: 419 y: 148 time: 10503.333333333334\n",
      "id: 8 x: 415 y: 140 time: 10503.333333333334\n",
      "id: 4 x: 181 y: 164 time: 10536.666666666668\n",
      "id: 8 x: 181 y: 157 time: 10536.666666666668\n",
      "id: 4 x: 419 y: 148 time: 10536.666666666668\n",
      "id: 8 x: 415 y: 139 time: 10536.666666666668\n",
      "id: 4 x: 181 y: 165 time: 10570.0\n",
      "id: 8 x: 181 y: 157 time: 10570.0\n",
      "id: 4 x: 419 y: 149 time: 10570.0\n",
      "id: 8 x: 415 y: 138 time: 10570.0\n",
      "id: 4 x: 181 y: 164 time: 10605.0\n",
      "id: 8 x: 181 y: 156 time: 10605.0\n",
      "id: 4 x: 417 y: 150 time: 10605.0\n",
      "id: 8 x: 413 y: 134 time: 10605.0\n",
      "id: 4 x: 182 y: 163 time: 10638.333333333334\n",
      "id: 8 x: 181 y: 155 time: 10638.333333333334\n",
      "id: 4 x: 415 y: 152 time: 10638.333333333334\n",
      "id: 8 x: 412 y: 130 time: 10638.333333333334\n",
      "id: 4 x: 182 y: 163 time: 10671.666666666666\n",
      "id: 8 x: 181 y: 155 time: 10671.666666666666\n",
      "id: 4 x: 412 y: 152 time: 10671.666666666666\n",
      "id: 8 x: 412 y: 128 time: 10671.666666666666\n",
      "id: 4 x: 183 y: 163 time: 10705.0\n",
      "id: 8 x: 182 y: 155 time: 10705.0\n",
      "id: 4 x: 410 y: 152 time: 10705.0\n",
      "id: 8 x: 412 y: 125 time: 10705.0\n",
      "id: 4 x: 184 y: 163 time: 10738.333333333334\n",
      "id: 8 x: 183 y: 154 time: 10738.333333333334\n",
      "id: 4 x: 411 y: 151 time: 10738.333333333334\n",
      "id: 8 x: 412 y: 122 time: 10738.333333333334\n",
      "id: 4 x: 184 y: 163 time: 10771.666666666666\n",
      "id: 8 x: 183 y: 155 time: 10771.666666666666\n",
      "id: 4 x: 411 y: 151 time: 10771.666666666666\n",
      "id: 8 x: 412 y: 121 time: 10771.666666666666\n",
      "id: 4 x: 184 y: 163 time: 10805.000000000002\n",
      "id: 8 x: 181 y: 153 time: 10805.000000000002\n",
      "id: 4 x: 411 y: 150 time: 10805.000000000002\n",
      "id: 8 x: 412 y: 120 time: 10805.000000000002\n",
      "id: 4 x: 185 y: 162 time: 10838.333333333334\n",
      "id: 8 x: 180 y: 149 time: 10838.333333333334\n",
      "id: 4 x: 410 y: 150 time: 10838.333333333334\n",
      "id: 8 x: 413 y: 118 time: 10838.333333333334\n",
      "id: 4 x: 186 y: 162 time: 10871.666666666668\n",
      "id: 8 x: 180 y: 148 time: 10871.666666666668\n",
      "id: 4 x: 410 y: 150 time: 10871.666666666668\n",
      "id: 8 x: 414 y: 117 time: 10871.666666666668\n",
      "id: 4 x: 185 y: 163 time: 10905.000000000002\n",
      "id: 8 x: 180 y: 148 time: 10905.000000000002\n",
      "id: 4 x: 411 y: 149 time: 10905.000000000002\n",
      "id: 8 x: 414 y: 118 time: 10905.000000000002\n",
      "id: 4 x: 185 y: 163 time: 10938.333333333334\n",
      "id: 8 x: 180 y: 147 time: 10938.333333333334\n",
      "id: 4 x: 412 y: 149 time: 10938.333333333334\n",
      "id: 8 x: 415 y: 118 time: 10938.333333333334\n",
      "id: 4 x: 185 y: 163 time: 0.0\n",
      "id: 8 x: 180 y: 147 time: 0.0\n",
      "id: 4 x: 411 y: 149 time: 0.0\n",
      "id: 8 x: 416 y: 116 time: 0.0\n",
      "id: 4 x: 185 y: 163 time: 0.0\n",
      "id: 8 x: 180 y: 146 time: 0.0\n",
      "id: 4 x: 411 y: 148 time: 0.0\n",
      "id: 8 x: 416 y: 116 time: 0.0\n",
      "id: 4 x: 185 y: 163 time: 0.0\n",
      "id: 8 x: 180 y: 147 time: 0.0\n",
      "id: 4 x: 412 y: 148 time: 0.0\n",
      "id: 8 x: 415 y: 117 time: 0.0\n",
      "id: 4 x: 184 y: 164 time: 0.0\n",
      "id: 8 x: 180 y: 147 time: 0.0\n",
      "id: 4 x: 411 y: 148 time: 0.0\n",
      "id: 8 x: 415 y: 118 time: 0.0\n",
      "id: 4 x: 184 y: 164 time: 0.0\n",
      "id: 8 x: 180 y: 148 time: 0.0\n",
      "id: 4 x: 410 y: 149 time: 0.0\n",
      "id: 8 x: 415 y: 118 time: 0.0\n",
      "id: 4 x: 185 y: 165 time: 0.0\n",
      "id: 8 x: 180 y: 149 time: 0.0\n",
      "id: 4 x: 411 y: 149 time: 0.0\n",
      "id: 8 x: 414 y: 119 time: 0.0\n",
      "id: 4 x: 185 y: 166 time: 0.0\n",
      "id: 8 x: 180 y: 150 time: 0.0\n",
      "id: 4 x: 413 y: 149 time: 0.0\n",
      "id: 8 x: 414 y: 120 time: 0.0\n",
      "id: 4 x: 184 y: 165 time: 0.0\n",
      "id: 8 x: 180 y: 152 time: 0.0\n",
      "id: 4 x: 413 y: 149 time: 0.0\n",
      "id: 8 x: 414 y: 121 time: 0.0\n",
      "id: 4 x: 184 y: 165 time: 0.0\n",
      "id: 8 x: 181 y: 155 time: 0.0\n",
      "id: 4 x: 413 y: 148 time: 0.0\n",
      "id: 8 x: 414 y: 123 time: 0.0\n",
      "id: 4 x: 183 y: 166 time: 0.0\n",
      "id: 8 x: 182 y: 160 time: 0.0\n",
      "id: 4 x: 414 y: 148 time: 0.0\n",
      "id: 8 x: 414 y: 129 time: 0.0\n",
      "id: 4 x: 183 y: 167 time: 0.0\n",
      "id: 8 x: 183 y: 161 time: 0.0\n",
      "id: 4 x: 417 y: 149 time: 0.0\n",
      "id: 8 x: 414 y: 139 time: 0.0\n",
      "id: 4 x: 182 y: 168 time: 0.0\n",
      "id: 8 x: 181 y: 161 time: 0.0\n",
      "id: 4 x: 418 y: 148 time: 0.0\n",
      "id: 8 x: 417 y: 141 time: 0.0\n",
      "id: 4 x: 181 y: 169 time: 0.0\n",
      "id: 8 x: 182 y: 162 time: 0.0\n",
      "id: 4 x: 420 y: 151 time: 0.0\n",
      "id: 8 x: 417 y: 142 time: 0.0\n",
      "id: 4 x: 181 y: 168 time: 0.0\n",
      "id: 8 x: 181 y: 161 time: 0.0\n",
      "id: 4 x: 421 y: 151 time: 0.0\n",
      "id: 8 x: 417 y: 142 time: 0.0\n",
      "id: 4 x: 181 y: 168 time: 0.0\n",
      "id: 8 x: 181 y: 161 time: 0.0\n",
      "id: 4 x: 420 y: 149 time: 0.0\n",
      "id: 8 x: 417 y: 141 time: 0.0\n"
     ]
    }
   ],
   "source": [
    "# mediapipe hand detection from video\n",
    "name = '292.mp4'\n",
    "cap = cv2.VideoCapture(name)\n",
    "allList = []\n",
    "\n",
    "while(cap.isOpened()):\n",
    "    success, img = cap.read()\n",
    "    if success:\n",
    "        imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "        results = hands.process(imgRGB)\n",
    "        if results.multi_hand_landmarks:\n",
    "            lmList = []\n",
    "            for handLms in results.multi_hand_landmarks:\n",
    "                for id, lm in enumerate(handLms.landmark):\n",
    "                    h, w, c = img.shape\n",
    "                    cx, cy = int(lm.x*w), int(lm.y*h)\n",
    "                    ts = cap.get(cv2.CAP_PROP_POS_MSEC)\n",
    "                    if id == 4 or id == 8:                    \n",
    "                        lmList.append([id, cx, cy, ts])\n",
    "                        print(\"id:\", id,\"x:\",cx, \"y:\", cy, \"time:\", ts)\n",
    "                mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)\n",
    "        cv2.imshow(\"image\", img)\n",
    "    else:\n",
    "        break\n",
    "    allList.append(lmList)\n",
    "    cv2.waitKey(1)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d303c598",
   "metadata": {},
   "source": [
    "# Part 1 : MediaPipe Hand detection and feature extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2084bac9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create dataframe fo\n",
    "np_allList = np.array(allList)\n",
    "length = []\n",
    "for i in range(np_allList.shape[0]):\n",
    "    x1 = np_allList[i][0][1]\n",
    "    y1 = np_allList[i][0][2]\n",
    "    x2 = np_allList[i][1][1]\n",
    "    y2 = np_allList[i][1][2]\n",
    "    x3 = np_allList[i][2][1]\n",
    "    y3 = np_allList[i][2][2]\n",
    "    x4 = np_allList[i][3][1]\n",
    "    y4 = np_allList[i][3][2]\n",
    "    ts = np_allList[i][0][3]\n",
    "    \n",
    "    if (x3-x1) > 0 :\n",
    "        right = math.hypot(x2 - x1, y2 - y1)\n",
    "        left = math.hypot(x4 - x3, y4 - y3)\n",
    "    else:\n",
    "        left = math.hypot(x2 - x1, y2 - y1)\n",
    "        right = math.hypot(x4 - x3, y4 - y3)\n",
    "    \n",
    "    length.append([ts, right, left]) \n",
    "    \n",
    "df = pd.DataFrame(length, columns = ['time', 'right', 'left'])\n",
    "df['diff'] = (df['time'].diff())\n",
    "df = df.loc[df['diff'] > 0]\n",
    "del(df['diff'])\n",
    "df['r'] = (df['right']/(max(df['right']))) *100\n",
    "df['l'] = (df['left']/(max(df['left']))) *100\n",
    "del(df['right'], df['left'])\n",
    "df = df.loc[df['time'] <= 10000]\n",
    "# print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9afae4ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Find Peak and create df with peak\n",
    "r_1d = df['r']\n",
    "r_peak, _ = find_peaks(r_1d, prominence =30)\n",
    "r_trough, _ = find_peaks(-r_1d, prominence =30)\n",
    "df.loc[df.iloc[r_peak].index, 'r_peak'] = True\n",
    "df.loc[df.iloc[r_trough].index, 'r_trough'] = True\n",
    "\n",
    "l_1d = df['l']\n",
    "l_peak, _ = find_peaks(l_1d, prominence =30)\n",
    "l_trough, _ = find_peaks(-l_1d, prominence =30)\n",
    "df.loc[df.iloc[l_peak].index, 'l_peak'] = True\n",
    "df.loc[df.iloc[l_trough].index, 'l_trough'] = True\n",
    "\n",
    "## plot and save figure\n",
    "fig = plt.figure(figsize=(15, 10))\n",
    "gs = fig.add_gridspec(2, hspace=0.4)\n",
    "axs = gs.subplots(sharex=False, sharey=False)\n",
    "fig.suptitle('Finger Tapping Test', color='green', fontweight=\"bold\", size=28)\n",
    "axs[0].set_title('Right hand',color='r',fontweight=\"regular\", size=24)\n",
    "axs[0].figsize=(20,10)\n",
    "axs[0].plot(df['time'], df['r'], markevery=r_peak, marker='o',color='r')\n",
    "axs[0].plot(df['time'], df['r'], markevery=r_trough, marker='o',color='r')\n",
    "axs[0].set_ylabel('Amplitude (%)',fontsize = 20.0)\n",
    "axs[0].set_xlabel('Time (msec)',fontsize = 20.0)\n",
    "\n",
    "axs[1].set_title('Left hand',color='b',fontweight=\"regular\", size=24)\n",
    "axs[1].plot(df['time'], df['l'], markevery=l_peak, marker='x',color='b')\n",
    "axs[1].plot(df['time'], df['l'], markevery=l_trough, marker='x',color='b')\n",
    "axs[1].set_ylabel('Amplitude (%)',fontsize = 20.0)\n",
    "axs[1].set_xlabel('Time (msec)',fontsize = 20.0)\n",
    "\n",
    "# save file\n",
    "name_new = name.replace('.mp4','')\n",
    "df.to_csv('%s.csv' % name_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2104175e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             r           l\n",
      "0    97.742876   99.091406\n",
      "1   100.000000  100.000000\n",
      "2    94.375667   90.925149\n",
      "3    92.404989   96.240818\n",
      "4    92.506307   90.418598\n",
      "5    92.791784   89.341540\n",
      "6    88.910086   90.917377\n",
      "7    80.915252   77.499795\n",
      "8    84.636421   88.976976\n",
      "9    90.610546   92.512203\n",
      "10   78.873767   75.971194\n",
      "11   84.987261   71.968604\n",
      "12   81.755319   89.341540\n",
      "13   91.668587   86.324679\n",
      "14   74.719371   66.540535\n",
      "15   85.600988   85.700321\n",
      "16   77.200294   76.314558\n",
      "17   75.679276   65.036842\n",
      "18   69.611156   62.476677\n",
      "19   71.416290   77.627337\n",
      "20   58.759868   55.365071\n",
      "21   75.153212   88.259343\n",
      "22   78.404297   70.249495\n",
      "23   73.244648   78.180626\n",
      "24   62.424740   71.811338\n",
      "25   70.990660   59.783385\n",
      "26   67.268243   68.218467\n",
      "27   68.646668   76.564149\n",
      "28   81.221119   77.927145\n",
      "29   76.641539         NaN\n",
      "29\n"
     ]
    }
   ],
   "source": [
    "df4 = pd.read_csv('192.csv', header = 0)\n",
    "rp = df4.loc[df4['r_peak']==True,['r']]\n",
    "rp = rp.reset_index(drop=True)\n",
    "lp = df4.loc[df4['l_peak']==True,['l']]\n",
    "lp = lp.reset_index(drop=True)\n",
    "df5 = pd.concat([rp,lp],axis=1)\n",
    "#check NaN if less than 10 times\n",
    "rtap, ltap = len(rp),len(lp)\n",
    "tapmin = min(rtap,ltap)\n",
    "if tapmin < 10:\n",
    "    ten = pd.DataFrame({'ten': [0] * 10})\n",
    "    df5 = pd.concat([df5,ten],axis=1)\n",
    "    df5.fillna(0, inplace=True)\n",
    "    del(df5['ten'])\n",
    "    \n",
    "print(df5)\n",
    "print(tapmin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0028fad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tap score (total taps in 10 seconds) :\n",
      "    Right         :  30\n",
      "    Left          :  29\n",
      "    Tap different):  1\n",
      "Amplitude\n",
      "    Right, mean (sd,var): 80.64 ( 10.58 )\n",
      "    Left,  mean (sd,var): 79.99 ( 12.07 )\n",
      "Bradykinesia score\n",
      "    Right amplitude diff 1-3  : 3.37\n",
      "    Right amplitude diff 1-5  : 5.24\n",
      "    Right amplitude diff 1-7  : 8.83\n",
      "    Right amplitude diff 1-10 : 7.13\n",
      "    Left  amplitude diff 1-3  : 8.17\n",
      "    Left  amplitude diff 1-5  : 8.67\n",
      "    Left  amplitude diff 1-7  : 8.17\n",
      "    Left  amplitude diff 1-10 : 6.58\n"
     ]
    }
   ],
   "source": [
    "##### peak analysis\n",
    "# variables\n",
    "rp_count,lp_count = len(rp), len(lp)\n",
    "tap_num = max(rp_count,lp_count)\n",
    "\n",
    "rp_mean,rp_std = df5['r'].mean(), df5['r'].std()\n",
    "rp_diff3  = df5.iloc[0,0]-df5.iloc[2,0]\n",
    "rp_diff5  = df5.iloc[0,0]-df5.iloc[4,0]\n",
    "rp_diff7  = df5.iloc[0,0]-df5.iloc[6,0]\n",
    "rp_diff10 = df5.iloc[0,0]-df5.iloc[9,0]\n",
    "\n",
    "lp_mean,lp_std = df5['l'].mean(), df5['l'].std()\n",
    "lp_diff3  = df5.iloc[0,1]-df5.iloc[2,1]\n",
    "lp_diff5  = df5.iloc[0,1]-df5.iloc[4,1]\n",
    "lp_diff7  = df5.iloc[0,1]-df5.iloc[6,1]\n",
    "lp_diff10 = df5.iloc[0,1]-df5.iloc[9,1]\n",
    "\n",
    "tap_diff = abs(rp_count-lp_count)\n",
    "\n",
    "## report \n",
    "print(\"Tap score (total taps in 10 seconds) :\")\n",
    "print(\"    Right         : \", rp_count)\n",
    "print(\"    Left          : \", lp_count)\n",
    "print(\"    Tap different): \", tap_diff)\n",
    "print(\"Amplitude\")\n",
    "print(\"    Right, mean (sd,var):\",str(round(rp_mean,2)),\"(\",str(round(rp_std,2)),\")\")\n",
    "print(\"    Left,  mean (sd,var):\",str(round(lp_mean,2)),\"(\",str(round(lp_std,2)),\")\")\n",
    "print(\"Bradykinesia score\")\n",
    "print(\"    Right amplitude diff 1-3  :\",str(round(rp_diff3,2)))\n",
    "print(\"    Right amplitude diff 1-5  :\",str(round(rp_diff5,2)))\n",
    "print(\"    Right amplitude diff 1-7  :\",str(round(rp_diff7,2)))\n",
    "print(\"    Right amplitude diff 1-10 :\",str(round(rp_diff10,2)))\n",
    "print(\"    Left  amplitude diff 1-3  :\",str(round(lp_diff3,2)))\n",
    "print(\"    Left  amplitude diff 1-5  :\",str(round(lp_diff5,2)))\n",
    "print(\"    Left  amplitude diff 1-7  :\",str(round(lp_diff7,2)))\n",
    "print(\"    Left  amplitude diff 1-10 :\",str(round(lp_diff10,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5d7f3e8",
   "metadata": {},
   "source": [
    "# Part 2 : Load data from train ML model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6d6c55a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# video list\n",
    "filenames = [  'case1.csv',  'case2.csv',  'case3.csv',  'case4.csv', 'case5.csv', 'case6.csv', 'case7.csv', 'case8.csv', 'case9.csv', 'case10.csv', \n",
    "              'case11.csv', 'case12.csv', 'case13.csv', 'case14.csv','case15.csv','case16.csv','case17.csv','case18.csv','case19.csv', 'case20.csv', \n",
    "              'case21.csv', 'case22.csv', 'case23.csv', 'case24.csv','case25.csv','case26.csv','case27.csv','case28.csv','case29.csv', 'case30.csv',\n",
    "              'case31.csv', 'case32.csv', 'case33.csv', 'case34.csv','case35.csv','case36.csv','case37.csv','case38.csv','case39.csv', 'case40.csv',\n",
    "              'case41.csv', 'case42.csv', 'case43.csv', 'case44.csv','case45.csv','case46.csv','case47.csv','case48.csv','case49.csv', 'case50.csv',\n",
    "              'case51.csv', 'case52.csv', 'case53.csv', 'case54.csv','case55.csv','case56.csv','case57.csv','case58.csv','case59.csv', 'case60.csv',\n",
    "              'case61.csv', 'case62.csv', 'case63.csv', 'case64.csv','case65.csv','case66.csv','case67.csv','case68.csv','case69.csv', 'case70.csv',\n",
    "              'case71.csv', 'case72.csv', 'case73.csv', 'case74.csv','case75.csv','case76.csv','case77.csv','case78.csv','case79.csv', 'case80.csv',\n",
    "              'case81.csv', 'case82.csv', 'case83.csv', 'case84.csv','case85.csv','case86.csv','case87.csv','case88.csv','case89.csv', 'case90.csv',\n",
    "              'case91.csv', 'case92.csv', 'case93.csv', 'case94.csv','case95.csv','case96.csv','case97.csv','case98.csv','case99.csv','case100.csv'\n",
    "            ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dda29108",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>video_no</th>\n",
       "      <th>gender</th>\n",
       "      <th>handed</th>\n",
       "      <th>age</th>\n",
       "      <th>PD_duration</th>\n",
       "      <th>H&amp;Y</th>\n",
       "      <th>symptom_side</th>\n",
       "      <th>on_off</th>\n",
       "      <th>Levodopa</th>\n",
       "      <th>updrs_rt</th>\n",
       "      <th>updrs_lt</th>\n",
       "      <th>updrs_total</th>\n",
       "      <th>bradykinesia</th>\n",
       "      <th>bradykinesia1</th>\n",
       "      <th>ftt01_rt</th>\n",
       "      <th>ftt01_lt</th>\n",
       "      <th>ftt01</th>\n",
       "      <th>pd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>case1</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.5</td>\n",
       "      <td>right</td>\n",
       "      <td>off</td>\n",
       "      <td>yes</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>case2</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>66</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>case3</td>\n",
       "      <td>m</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>case4</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>47</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>case5</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>case96</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>case97</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>case98</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>case99</td>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>case100</td>\n",
       "      <td>f</td>\n",
       "      <td>left_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>left</td>\n",
       "      <td>off</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   video_no gender        handed age  PD_duration  H&Y symptom_side on_off  \\\n",
       "0     case1      f  right_handed  65          NaN  2.5        right    off   \n",
       "1     case2      f  right_handed  66          4.0  1.0        right     on   \n",
       "2     case3      m  right_handed  70          NaN  4.0        right     on   \n",
       "3     case4      f  right_handed  47          5.0  3.0        right     on   \n",
       "4     case5      f  right_handed  50          NaN  NaN          NaN    NaN   \n",
       "..      ...    ...           ...  ..          ...  ...          ...    ...   \n",
       "95   case96      f  right_handed  71          NaN  NaN          NaN    NaN   \n",
       "96   case97      f  right_handed  67          NaN  NaN          NaN    NaN   \n",
       "97   case98      f  right_handed  68          NaN  NaN          NaN    NaN   \n",
       "98   case99      f  right_handed  50          1.0  1.0        right     on   \n",
       "99  case100      f   left_handed  50          1.0  1.0         left    off   \n",
       "\n",
       "   Levodopa  updrs_rt  updrs_lt  updrs_total  bradykinesia  bradykinesia1  \\\n",
       "0       yes         4         3            7             1              1   \n",
       "1       yes         1         1            2             1              1   \n",
       "2       yes         3         2            5             1              1   \n",
       "3       yes         2         2            4             1              1   \n",
       "4       NaN         0         0            0             0              0   \n",
       "..      ...       ...       ...          ...           ...            ...   \n",
       "95      NaN         0         0            0             0              0   \n",
       "96      NaN         0         0            0             0              0   \n",
       "97      NaN         0         0            0             0              0   \n",
       "98      yes         1         1            2             1              1   \n",
       "99      yes         1         2            3             1              1   \n",
       "\n",
       "    ftt01_rt  ftt01_lt  ftt01  pd  \n",
       "0          1         1      1   1  \n",
       "1          0         0      0   1  \n",
       "2          1         1      1   1  \n",
       "3          1         1      1   1  \n",
       "4          0         0      0   0  \n",
       "..       ...       ...    ...  ..  \n",
       "95         0         0      0   0  \n",
       "96         0         0      0   0  \n",
       "97         0         0      0   0  \n",
       "98         0         0      0   1  \n",
       "99         0         1      1   1  \n",
       "\n",
       "[100 rows x 18 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### load df1 ###\n",
    "df1 = pd.read_excel(\"database-plosone.xlsx\")\n",
    "df1.set_index('video_no')\n",
    "df1['pd'] = df1['status'].apply(lambda val: 1 if val == 'pd' else 0)\n",
    "del(df1['status'])\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "90caad25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>video_no</th>\n",
       "      <th>rp_count</th>\n",
       "      <th>rp_mean</th>\n",
       "      <th>rp_std</th>\n",
       "      <th>rp_diff5</th>\n",
       "      <th>rp_diff7</th>\n",
       "      <th>rp_diff10</th>\n",
       "      <th>lp_count</th>\n",
       "      <th>lp_mean</th>\n",
       "      <th>lp_std</th>\n",
       "      <th>lp_diff5</th>\n",
       "      <th>lp_diff7</th>\n",
       "      <th>lp_diff10</th>\n",
       "      <th>tap_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>case1</td>\n",
       "      <td>4</td>\n",
       "      <td>25.854924</td>\n",
       "      <td>40.936364</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>13</td>\n",
       "      <td>67.383016</td>\n",
       "      <td>17.049590</td>\n",
       "      <td>8.285983</td>\n",
       "      <td>16.423469</td>\n",
       "      <td>21.485385</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>case2</td>\n",
       "      <td>15</td>\n",
       "      <td>79.654471</td>\n",
       "      <td>12.136359</td>\n",
       "      <td>11.637161</td>\n",
       "      <td>22.564771</td>\n",
       "      <td>11.756607</td>\n",
       "      <td>15</td>\n",
       "      <td>88.812446</td>\n",
       "      <td>7.041425</td>\n",
       "      <td>2.952424</td>\n",
       "      <td>11.411497</td>\n",
       "      <td>6.007453</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>case3</td>\n",
       "      <td>13</td>\n",
       "      <td>70.745735</td>\n",
       "      <td>18.123539</td>\n",
       "      <td>7.250319</td>\n",
       "      <td>38.046197</td>\n",
       "      <td>16.918433</td>\n",
       "      <td>24</td>\n",
       "      <td>74.848235</td>\n",
       "      <td>15.510136</td>\n",
       "      <td>19.440777</td>\n",
       "      <td>17.316792</td>\n",
       "      <td>21.629357</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>case4</td>\n",
       "      <td>16</td>\n",
       "      <td>76.546025</td>\n",
       "      <td>7.986921</td>\n",
       "      <td>27.114291</td>\n",
       "      <td>5.626236</td>\n",
       "      <td>9.435834</td>\n",
       "      <td>15</td>\n",
       "      <td>84.645646</td>\n",
       "      <td>9.471765</td>\n",
       "      <td>6.543946</td>\n",
       "      <td>7.676903</td>\n",
       "      <td>16.717972</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>case5</td>\n",
       "      <td>29</td>\n",
       "      <td>80.364007</td>\n",
       "      <td>8.596210</td>\n",
       "      <td>-6.063142</td>\n",
       "      <td>10.336391</td>\n",
       "      <td>13.158028</td>\n",
       "      <td>29</td>\n",
       "      <td>69.724136</td>\n",
       "      <td>9.328088</td>\n",
       "      <td>-3.739796</td>\n",
       "      <td>12.685131</td>\n",
       "      <td>7.496552</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>case96</td>\n",
       "      <td>34</td>\n",
       "      <td>71.335809</td>\n",
       "      <td>12.830499</td>\n",
       "      <td>-1.380972</td>\n",
       "      <td>4.866167</td>\n",
       "      <td>-13.466729</td>\n",
       "      <td>34</td>\n",
       "      <td>80.078827</td>\n",
       "      <td>11.389625</td>\n",
       "      <td>6.521098</td>\n",
       "      <td>9.807145</td>\n",
       "      <td>-0.467836</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>case97</td>\n",
       "      <td>17</td>\n",
       "      <td>92.543872</td>\n",
       "      <td>4.646739</td>\n",
       "      <td>5.269390</td>\n",
       "      <td>-2.547657</td>\n",
       "      <td>1.156951</td>\n",
       "      <td>17</td>\n",
       "      <td>87.166396</td>\n",
       "      <td>6.421301</td>\n",
       "      <td>3.377727</td>\n",
       "      <td>6.931046</td>\n",
       "      <td>-1.308826</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>case98</td>\n",
       "      <td>24</td>\n",
       "      <td>84.182118</td>\n",
       "      <td>6.934865</td>\n",
       "      <td>10.509525</td>\n",
       "      <td>16.269154</td>\n",
       "      <td>25.488504</td>\n",
       "      <td>24</td>\n",
       "      <td>85.137915</td>\n",
       "      <td>6.286857</td>\n",
       "      <td>-11.456259</td>\n",
       "      <td>-4.665376</td>\n",
       "      <td>6.857457</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>case99</td>\n",
       "      <td>17</td>\n",
       "      <td>90.482241</td>\n",
       "      <td>4.787156</td>\n",
       "      <td>8.971359</td>\n",
       "      <td>9.313937</td>\n",
       "      <td>9.940941</td>\n",
       "      <td>17</td>\n",
       "      <td>86.817299</td>\n",
       "      <td>5.416866</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.554047</td>\n",
       "      <td>5.614567</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>case100</td>\n",
       "      <td>16</td>\n",
       "      <td>74.619199</td>\n",
       "      <td>8.969255</td>\n",
       "      <td>9.881528</td>\n",
       "      <td>9.054608</td>\n",
       "      <td>12.896343</td>\n",
       "      <td>15</td>\n",
       "      <td>67.406514</td>\n",
       "      <td>9.166458</td>\n",
       "      <td>-4.849873</td>\n",
       "      <td>15.652992</td>\n",
       "      <td>21.382042</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   video_no  rp_count    rp_mean     rp_std   rp_diff5   rp_diff7  rp_diff10  \\\n",
       "0     case1         4  25.854924  40.936364  66.931154  66.931154  66.931154   \n",
       "1     case2        15  79.654471  12.136359  11.637161  22.564771  11.756607   \n",
       "2     case3        13  70.745735  18.123539   7.250319  38.046197  16.918433   \n",
       "3     case4        16  76.546025   7.986921  27.114291   5.626236   9.435834   \n",
       "4     case5        29  80.364007   8.596210  -6.063142  10.336391  13.158028   \n",
       "..      ...       ...        ...        ...        ...        ...        ...   \n",
       "95   case96        34  71.335809  12.830499  -1.380972   4.866167 -13.466729   \n",
       "96   case97        17  92.543872   4.646739   5.269390  -2.547657   1.156951   \n",
       "97   case98        24  84.182118   6.934865  10.509525  16.269154  25.488504   \n",
       "98   case99        17  90.482241   4.787156   8.971359   9.313937   9.940941   \n",
       "99  case100        16  74.619199   8.969255   9.881528   9.054608  12.896343   \n",
       "\n",
       "    lp_count    lp_mean     lp_std   lp_diff5   lp_diff7  lp_diff10  tap_diff  \n",
       "0         13  67.383016  17.049590   8.285983  16.423469  21.485385         9  \n",
       "1         15  88.812446   7.041425   2.952424  11.411497   6.007453         0  \n",
       "2         24  74.848235  15.510136  19.440777  17.316792  21.629357        11  \n",
       "3         15  84.645646   9.471765   6.543946   7.676903  16.717972         1  \n",
       "4         29  69.724136   9.328088  -3.739796  12.685131   7.496552         0  \n",
       "..       ...        ...        ...        ...        ...        ...       ...  \n",
       "95        34  80.078827  11.389625   6.521098   9.807145  -0.467836         0  \n",
       "96        17  87.166396   6.421301   3.377727   6.931046  -1.308826         0  \n",
       "97        24  85.137915   6.286857 -11.456259  -4.665376   6.857457         0  \n",
       "98        17  86.817299   5.416866   0.000000   8.554047   5.614567         0  \n",
       "99        15  67.406514   9.166458  -4.849873  15.652992  21.382042         1  \n",
       "\n",
       "[100 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create df2\n",
    "dataframes = []\n",
    "for f in filenames:\n",
    "    # load data\n",
    "    df = pd.read_csv(f)\n",
    "    df = df.loc[df['time'] <= 10000]\n",
    "\n",
    "    # extract only peak amplitude\n",
    "    rp = df.loc[df['r_peak']==True,['r']]\n",
    "    rp = rp.reset_index(drop=True)\n",
    "    lp = df.loc[df['l_peak']==True,['l']]\n",
    "    lp = lp.reset_index(drop=True)\n",
    "    df = pd.concat([rp,lp],axis=1)\n",
    "    \n",
    "    #check NaN if less than 10 times\n",
    "    rtap, ltap = len(rp),len(lp)\n",
    "    tapmin = min(rtap,ltap)\n",
    "    tap_diff = abs(rtap-ltap) \n",
    "    ten = pd.DataFrame({'ten': [0] * 10})\n",
    "    if tapmin < 10: \n",
    "        df = pd.concat([df,ten],axis=1)\n",
    "        df.fillna(0, inplace=True)\n",
    "        del(df['ten'])\n",
    "    \n",
    "    rp_mean,rp_std = df['r'].mean(), df['r'].std() \n",
    "    rp_diff5  = df.iloc[0,0]-df.iloc[4,0]\n",
    "    rp_diff7  = df.iloc[0,0]-df.iloc[6,0]\n",
    "    rp_diff10 = df.iloc[0,0]-df.iloc[9,0]\n",
    "    lp_mean,lp_std = df['l'].mean(), df['l'].std()\n",
    "    lp_diff5  = df.iloc[0,1]-df.iloc[4,1]\n",
    "    lp_diff7  = df.iloc[0,1]-df.iloc[6,1]\n",
    "    lp_diff10 = df.iloc[0,1]-df.iloc[9,1]\n",
    " \n",
    "    v_new = f.replace('.csv','')\n",
    "    new_row = {'video_no': v_new, \n",
    "            'rp_count':rtap,\n",
    "            'rp_mean':rp_mean,'rp_std':rp_std,\n",
    "            'rp_diff5':rp_diff5,\n",
    "            'rp_diff7':rp_diff7,'rp_diff10':rp_diff10,\n",
    "               \n",
    "            'lp_count':ltap, \n",
    "            'lp_mean':lp_mean,'lp_std':lp_std,\n",
    "            'lp_diff5':lp_diff5,\n",
    "            'lp_diff7':lp_diff7,'lp_diff10':lp_diff10,\n",
    "\n",
    "            'tap_diff':tap_diff}\n",
    "    # append each df to dataframe\n",
    "    dataframes.append(new_row)\n",
    "total_data = pd.DataFrame(dataframes)\n",
    "total_data.to_csv('extract_data_2.csv', header=True)              \n",
    "\n",
    "### df2 ###\n",
    "df2 = pd.read_csv(\"extract_data_2.csv\")\n",
    "df2.set_index('video_no')\n",
    "#del(df2['Unnamed: 0'], df2['rp_count'], df2['lp_count'])\n",
    "del(df2['Unnamed: 0'])\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0161e802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>handed</th>\n",
       "      <th>age</th>\n",
       "      <th>PD_duration</th>\n",
       "      <th>H&amp;Y</th>\n",
       "      <th>symptom_side</th>\n",
       "      <th>on_off</th>\n",
       "      <th>Levodopa</th>\n",
       "      <th>updrs_rt</th>\n",
       "      <th>updrs_lt</th>\n",
       "      <th>...</th>\n",
       "      <th>rp_diff5</th>\n",
       "      <th>rp_diff7</th>\n",
       "      <th>rp_diff10</th>\n",
       "      <th>lp_count</th>\n",
       "      <th>lp_mean</th>\n",
       "      <th>lp_std</th>\n",
       "      <th>lp_diff5</th>\n",
       "      <th>lp_diff7</th>\n",
       "      <th>lp_diff10</th>\n",
       "      <th>tap_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.5</td>\n",
       "      <td>right</td>\n",
       "      <td>off</td>\n",
       "      <td>yes</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>66.931154</td>\n",
       "      <td>13</td>\n",
       "      <td>67.383016</td>\n",
       "      <td>17.049590</td>\n",
       "      <td>8.285983</td>\n",
       "      <td>16.423469</td>\n",
       "      <td>21.485385</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>66</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>11.637161</td>\n",
       "      <td>22.564771</td>\n",
       "      <td>11.756607</td>\n",
       "      <td>15</td>\n",
       "      <td>88.812446</td>\n",
       "      <td>7.041425</td>\n",
       "      <td>2.952424</td>\n",
       "      <td>11.411497</td>\n",
       "      <td>6.007453</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>m</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>70</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>7.250319</td>\n",
       "      <td>38.046197</td>\n",
       "      <td>16.918433</td>\n",
       "      <td>24</td>\n",
       "      <td>74.848235</td>\n",
       "      <td>15.510136</td>\n",
       "      <td>19.440777</td>\n",
       "      <td>17.316792</td>\n",
       "      <td>21.629357</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>47</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>27.114291</td>\n",
       "      <td>5.626236</td>\n",
       "      <td>9.435834</td>\n",
       "      <td>15</td>\n",
       "      <td>84.645646</td>\n",
       "      <td>9.471765</td>\n",
       "      <td>6.543946</td>\n",
       "      <td>7.676903</td>\n",
       "      <td>16.717972</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-6.063142</td>\n",
       "      <td>10.336391</td>\n",
       "      <td>13.158028</td>\n",
       "      <td>29</td>\n",
       "      <td>69.724136</td>\n",
       "      <td>9.328088</td>\n",
       "      <td>-3.739796</td>\n",
       "      <td>12.685131</td>\n",
       "      <td>7.496552</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.380972</td>\n",
       "      <td>4.866167</td>\n",
       "      <td>-13.466729</td>\n",
       "      <td>34</td>\n",
       "      <td>80.078827</td>\n",
       "      <td>11.389625</td>\n",
       "      <td>6.521098</td>\n",
       "      <td>9.807145</td>\n",
       "      <td>-0.467836</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.269390</td>\n",
       "      <td>-2.547657</td>\n",
       "      <td>1.156951</td>\n",
       "      <td>17</td>\n",
       "      <td>87.166396</td>\n",
       "      <td>6.421301</td>\n",
       "      <td>3.377727</td>\n",
       "      <td>6.931046</td>\n",
       "      <td>-1.308826</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.509525</td>\n",
       "      <td>16.269154</td>\n",
       "      <td>25.488504</td>\n",
       "      <td>24</td>\n",
       "      <td>85.137915</td>\n",
       "      <td>6.286857</td>\n",
       "      <td>-11.456259</td>\n",
       "      <td>-4.665376</td>\n",
       "      <td>6.857457</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>f</td>\n",
       "      <td>right_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>right</td>\n",
       "      <td>on</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>8.971359</td>\n",
       "      <td>9.313937</td>\n",
       "      <td>9.940941</td>\n",
       "      <td>17</td>\n",
       "      <td>86.817299</td>\n",
       "      <td>5.416866</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.554047</td>\n",
       "      <td>5.614567</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>f</td>\n",
       "      <td>left_handed</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>left</td>\n",
       "      <td>off</td>\n",
       "      <td>yes</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>9.881528</td>\n",
       "      <td>9.054608</td>\n",
       "      <td>12.896343</td>\n",
       "      <td>15</td>\n",
       "      <td>67.406514</td>\n",
       "      <td>9.166458</td>\n",
       "      <td>-4.849873</td>\n",
       "      <td>15.652992</td>\n",
       "      <td>21.382042</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender        handed age  PD_duration  H&Y symptom_side on_off Levodopa  \\\n",
       "0       f  right_handed  65          NaN  2.5        right    off      yes   \n",
       "1       f  right_handed  66          4.0  1.0        right     on      yes   \n",
       "2       m  right_handed  70          NaN  4.0        right     on      yes   \n",
       "3       f  right_handed  47          5.0  3.0        right     on      yes   \n",
       "4       f  right_handed  50          NaN  NaN          NaN    NaN      NaN   \n",
       "..    ...           ...  ..          ...  ...          ...    ...      ...   \n",
       "95      f  right_handed  71          NaN  NaN          NaN    NaN      NaN   \n",
       "96      f  right_handed  67          NaN  NaN          NaN    NaN      NaN   \n",
       "97      f  right_handed  68          NaN  NaN          NaN    NaN      NaN   \n",
       "98      f  right_handed  50          1.0  1.0        right     on      yes   \n",
       "99      f   left_handed  50          1.0  1.0         left    off      yes   \n",
       "\n",
       "    updrs_rt  updrs_lt  ...   rp_diff5   rp_diff7  rp_diff10  lp_count  \\\n",
       "0          4         3  ...  66.931154  66.931154  66.931154        13   \n",
       "1          1         1  ...  11.637161  22.564771  11.756607        15   \n",
       "2          3         2  ...   7.250319  38.046197  16.918433        24   \n",
       "3          2         2  ...  27.114291   5.626236   9.435834        15   \n",
       "4          0         0  ...  -6.063142  10.336391  13.158028        29   \n",
       "..       ...       ...  ...        ...        ...        ...       ...   \n",
       "95         0         0  ...  -1.380972   4.866167 -13.466729        34   \n",
       "96         0         0  ...   5.269390  -2.547657   1.156951        17   \n",
       "97         0         0  ...  10.509525  16.269154  25.488504        24   \n",
       "98         1         1  ...   8.971359   9.313937   9.940941        17   \n",
       "99         1         2  ...   9.881528   9.054608  12.896343        15   \n",
       "\n",
       "      lp_mean     lp_std   lp_diff5   lp_diff7  lp_diff10  tap_diff  \n",
       "0   67.383016  17.049590   8.285983  16.423469  21.485385         9  \n",
       "1   88.812446   7.041425   2.952424  11.411497   6.007453         0  \n",
       "2   74.848235  15.510136  19.440777  17.316792  21.629357        11  \n",
       "3   84.645646   9.471765   6.543946   7.676903  16.717972         1  \n",
       "4   69.724136   9.328088  -3.739796  12.685131   7.496552         0  \n",
       "..        ...        ...        ...        ...        ...       ...  \n",
       "95  80.078827  11.389625   6.521098   9.807145  -0.467836         0  \n",
       "96  87.166396   6.421301   3.377727   6.931046  -1.308826         0  \n",
       "97  85.137915   6.286857 -11.456259  -4.665376   6.857457         0  \n",
       "98  86.817299   5.416866   0.000000   8.554047   5.614567         0  \n",
       "99  67.406514   9.166458  -4.849873  15.652992  21.382042         1  \n",
       "\n",
       "[100 rows x 30 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### df : merge df1+df2 ###\n",
    "df = pd.merge(df1, df2, on='video_no', how='right')\n",
    "df.to_csv('df_combind.csv', header=True)              \n",
    "del(df['video_no'])\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af4f037b",
   "metadata": {},
   "source": [
    "# Part 3 : prepare data for ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5b2132cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "del(df['gender'],df['handed'],df['age'],df['PD_duration'],df['H&Y'],df['symptom_side'],df['on_off'],df['Levodopa'],\n",
    "    df['updrs_rt'],df['updrs_lt'],df['updrs_total'],df['pd'],\n",
    "    df['bradykinesia'],df['ftt01_rt'],df['ftt01_lt'],df['ftt01'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "25874c7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    bradykinesia1  rp_count    rp_mean     rp_std   rp_diff5   rp_diff7  \\\n",
      "0               1         4  25.854924  40.936364  66.931154  66.931154   \n",
      "1               1        15  79.654471  12.136359  11.637161  22.564771   \n",
      "2               1        13  70.745735  18.123539   7.250319  38.046197   \n",
      "3               1        16  76.546025   7.986921  27.114291   5.626236   \n",
      "4               0        29  80.364007   8.596210  -6.063142  10.336391   \n",
      "..            ...       ...        ...        ...        ...        ...   \n",
      "95              0        34  71.335809  12.830499  -1.380972   4.866167   \n",
      "96              0        17  92.543872   4.646739   5.269390  -2.547657   \n",
      "97              0        24  84.182118   6.934865  10.509525  16.269154   \n",
      "98              1        17  90.482241   4.787156   8.971359   9.313937   \n",
      "99              1        16  74.619199   8.969255   9.881528   9.054608   \n",
      "\n",
      "    rp_diff10  lp_count    lp_mean     lp_std   lp_diff5   lp_diff7  \\\n",
      "0   66.931154        13  67.383016  17.049590   8.285983  16.423469   \n",
      "1   11.756607        15  88.812446   7.041425   2.952424  11.411497   \n",
      "2   16.918433        24  74.848235  15.510136  19.440777  17.316792   \n",
      "3    9.435834        15  84.645646   9.471765   6.543946   7.676903   \n",
      "4   13.158028        29  69.724136   9.328088  -3.739796  12.685131   \n",
      "..        ...       ...        ...        ...        ...        ...   \n",
      "95 -13.466729        34  80.078827  11.389625   6.521098   9.807145   \n",
      "96   1.156951        17  87.166396   6.421301   3.377727   6.931046   \n",
      "97  25.488504        24  85.137915   6.286857 -11.456259  -4.665376   \n",
      "98   9.940941        17  86.817299   5.416866   0.000000   8.554047   \n",
      "99  12.896343        15  67.406514   9.166458  -4.849873  15.652992   \n",
      "\n",
      "    lp_diff10  tap_diff  \n",
      "0   21.485385         9  \n",
      "1    6.007453         0  \n",
      "2   21.629357        11  \n",
      "3   16.717972         1  \n",
      "4    7.496552         0  \n",
      "..        ...       ...  \n",
      "95  -0.467836         0  \n",
      "96  -1.308826         0  \n",
      "97   6.857457         0  \n",
      "98   5.614567         0  \n",
      "99  21.382042         1  \n",
      "\n",
      "[100 rows x 14 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1ed739e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('bradykinesia1', axis=1)\n",
    "y = df['bradykinesia1']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb96d367",
   "metadata": {},
   "source": [
    "# Part 4 : train ML with cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8a722dbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.71, Recall: 0.91, F1-Score: 0.80, Test AUC: 0.83, Training AUC: 0.97\n",
      "  Best Parameters: {'C': 10, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 1.00, Recall: 0.64, F1-Score: 0.78, Test AUC: 0.91, Training AUC: 0.96\n",
      "  Best Parameters: {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.82, Recall: 0.82, F1-Score: 0.82, Test AUC: 0.84, Training AUC: 0.96\n",
      "  Best Parameters: {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.95, Precision: 1.00, Recall: 0.90, F1-Score: 0.95, Test AUC: 1.00, Training AUC: 0.94\n",
      "  Best Parameters: {'C': 1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.65, Precision: 0.64, Recall: 0.70, F1-Score: 0.67, Test AUC: 0.79, Training AUC: 0.96\n",
      "  Best Parameters: {'C': 0.1, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.10\n",
      "  95% Confidence Interval: [0.67, 0.91]\n",
      "Precision:\n",
      "  Mean: 0.83\n",
      "  Standard Deviation: 0.15\n",
      "  95% Confidence Interval: [0.65, 1.02]\n",
      "Recall:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.11\n",
      "  95% Confidence Interval: [0.66, 0.93]\n",
      "F1:\n",
      "  Mean: 0.80\n",
      "  Standard Deviation: 0.09\n",
      "  95% Confidence Interval: [0.69, 0.91]\n",
      "Test auc:\n",
      "  Mean: 0.87\n",
      "  Standard Deviation: 0.07\n",
      "  95% Confidence Interval: [0.78, 0.97]\n",
      "Train auc:\n",
      "  Mean: 0.96\n",
      "  Standard Deviation: 0.01\n",
      "  95% Confidence Interval: [0.95, 0.97]\n"
     ]
    }
   ],
   "source": [
    "## Logistic regression\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Define the hyperparameter grid for Logistic Regression\n",
    "param_grid = {\n",
    "    'C': [0.1, 1, 10],  # Regularization strength\n",
    "    'penalty': ['l2'],  # Type of regularization\n",
    "    'solver': ['liblinear', 'saga']  # Solver that supports different penalties\n",
    "}\n",
    "\n",
    "# Initialize Logistic Regression model\n",
    "logreg_model = LogisticRegression(max_iter=1000, random_state=42)\n",
    "\n",
    "# To store results\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=logreg_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "    \n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "77bc9057",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.90, Precision: 0.85, Recall: 1.00, F1-Score: 0.92, Test AUC: 0.88, Training AUC: 0.97\n",
      "  Best Parameters: {'C': 0.1, 'gamma': 'scale', 'kernel': 'linear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 1.00, Recall: 0.64, F1-Score: 0.78, Test AUC: 0.96, Training AUC: 0.95\n",
      "  Best Parameters: {'C': 0.1, 'gamma': 'scale', 'kernel': 'linear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.89, Recall: 0.73, F1-Score: 0.80, Test AUC: 0.86, Training AUC: 0.96\n",
      "  Best Parameters: {'C': 0.1, 'gamma': 'scale', 'kernel': 'linear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.95, Precision: 1.00, Recall: 0.90, F1-Score: 0.95, Test AUC: 0.99, Training AUC: 0.95\n",
      "  Best Parameters: {'C': 10, 'gamma': 'scale', 'kernel': 'linear'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.73, Recall: 0.80, F1-Score: 0.76, Test AUC: 0.86, Training AUC: 0.96\n",
      "  Best Parameters: {'C': 0.1, 'gamma': 'scale', 'kernel': 'linear'}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.84\n",
      "  Standard Deviation: 0.07\n",
      "  95% Confidence Interval: [0.75, 0.93]\n",
      "Precision:\n",
      "  Mean: 0.89\n",
      "  Standard Deviation: 0.10\n",
      "  95% Confidence Interval: [0.77, 1.02]\n",
      "Recall:\n",
      "  Mean: 0.81\n",
      "  Standard Deviation: 0.13\n",
      "  95% Confidence Interval: [0.65, 0.97]\n",
      "F1:\n",
      "  Mean: 0.84\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.75, 0.94]\n",
      "Test auc:\n",
      "  Mean: 0.91\n",
      "  Standard Deviation: 0.05\n",
      "  95% Confidence Interval: [0.84, 0.98]\n",
      "Train auc:\n",
      "  Mean: 0.96\n",
      "  Standard Deviation: 0.01\n",
      "  95% Confidence Interval: [0.95, 0.97]\n"
     ]
    }
   ],
   "source": [
    "# svc \n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "param_grid = {\n",
    "    'C': [0.1, 1, 10],\n",
    "    'kernel': ['linear', 'rbf'],\n",
    "    'gamma': ['scale', 'auto'],\n",
    "}\n",
    "\n",
    "svm_model = SVC(random_state=42, probability=True)\n",
    "\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Variable to track the best model and its performance\n",
    "best_model_overall = None\n",
    "best_test_auc = -np.inf  # Initialize with a very low value\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=svm_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Check if this is the best model overall\n",
    "    if test_auc > best_test_auc:\n",
    "        best_test_auc = test_auc\n",
    "        best_model_overall = best_model  # Save the best model\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "\n",
    "# Save the best model overall\n",
    "model_filename = \"svm_best_model.pkl\"\n",
    "with open(model_filename, 'wb') as file:\n",
    "    pickle.dump(best_model_overall, file)\n",
    "    \n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "99314120",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.77, Recall: 0.91, F1-Score: 0.83, Test AUC: 0.82, Training AUC: 1.00\n",
      "  Best Parameters: {'max_depth': 3, 'n_estimators': 200}\n",
      "Fold Results:\n",
      "  Accuracy: 0.90, Precision: 1.00, Recall: 0.82, F1-Score: 0.90, Test AUC: 0.99, Training AUC: 1.00\n",
      "  Best Parameters: {'max_depth': 5, 'n_estimators': 100}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.82, Recall: 0.82, F1-Score: 0.82, Test AUC: 0.89, Training AUC: 0.99\n",
      "  Best Parameters: {'max_depth': 3, 'n_estimators': 200}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.88, Recall: 0.70, F1-Score: 0.78, Test AUC: 0.89, Training AUC: 1.00\n",
      "  Best Parameters: {'max_depth': None, 'n_estimators': 50}\n",
      "Fold Results:\n",
      "  Accuracy: 0.65, Precision: 0.64, Recall: 0.70, F1-Score: 0.67, Test AUC: 0.76, Training AUC: 1.00\n",
      "  Best Parameters: {'max_depth': 3, 'n_estimators': 50}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.69, 0.89]\n",
      "Precision:\n",
      "  Mean: 0.82\n",
      "  Standard Deviation: 0.12\n",
      "  95% Confidence Interval: [0.67, 0.97]\n",
      "Recall:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.69, 0.89]\n",
      "F1:\n",
      "  Mean: 0.80\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.70, 0.89]\n",
      "Test auc:\n",
      "  Mean: 0.87\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.77, 0.97]\n",
      "Train auc:\n",
      "  Mean: 1.00\n",
      "  Standard Deviation: 0.00\n",
      "  95% Confidence Interval: [0.99, 1.00]\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.69, 0.89]\n",
      "Precision:\n",
      "  Mean: 0.82\n",
      "  Standard Deviation: 0.12\n",
      "  95% Confidence Interval: [0.67, 0.97]\n",
      "Recall:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.69, 0.89]\n",
      "F1:\n",
      "  Mean: 0.80\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.70, 0.89]\n",
      "Test auc:\n",
      "  Mean: 0.87\n",
      "  Standard Deviation: 0.08\n",
      "  95% Confidence Interval: [0.77, 0.97]\n",
      "Train auc:\n",
      "  Mean: 1.00\n",
      "  Standard Deviation: 0.00\n",
      "  95% Confidence Interval: [0.99, 1.00]\n"
     ]
    }
   ],
   "source": [
    "## random forest ##\n",
    "# Define outer cross-validation\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Define the hyperparameter grid for RandomForest\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_depth': [3, 5, None]\n",
    "}\n",
    "\n",
    "# Initialize model\n",
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "\n",
    "# To store results\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=rf_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "    \n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")\n",
    "    \n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c4c39582",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.60, Precision: 0.62, Recall: 0.73, F1-Score: 0.67, Test AUC: 0.60, Training AUC: 0.99\n",
      "  Best Parameters: {'criterion': 'entropy', 'max_depth': 5}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 0.89, Recall: 0.73, F1-Score: 0.80, Test AUC: 0.76, Training AUC: 0.98\n",
      "  Best Parameters: {'criterion': 'gini', 'max_depth': 3}\n",
      "Fold Results:\n",
      "  Accuracy: 0.85, Precision: 1.00, Recall: 0.73, F1-Score: 0.84, Test AUC: 0.85, Training AUC: 0.98\n",
      "  Best Parameters: {'criterion': 'entropy', 'max_depth': 3}\n",
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.86, Recall: 0.60, F1-Score: 0.71, Test AUC: 0.80, Training AUC: 1.00\n",
      "  Best Parameters: {'criterion': 'gini', 'max_depth': 5}\n",
      "Fold Results:\n",
      "  Accuracy: 0.70, Precision: 0.67, Recall: 0.80, F1-Score: 0.73, Test AUC: 0.70, Training AUC: 0.97\n",
      "  Best Parameters: {'criterion': 'entropy', 'max_depth': 3}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.74\n",
      "  Standard Deviation: 0.09\n",
      "  95% Confidence Interval: [0.63, 0.85]\n",
      "Precision:\n",
      "  Mean: 0.81\n",
      "  Standard Deviation: 0.14\n",
      "  95% Confidence Interval: [0.63, 0.98]\n",
      "Recall:\n",
      "  Mean: 0.72\n",
      "  Standard Deviation: 0.06\n",
      "  95% Confidence Interval: [0.64, 0.80]\n",
      "F1:\n",
      "  Mean: 0.75\n",
      "  Standard Deviation: 0.06\n",
      "  95% Confidence Interval: [0.67, 0.83]\n",
      "Test auc:\n",
      "  Mean: 0.74\n",
      "  Standard Deviation: 0.09\n",
      "  95% Confidence Interval: [0.63, 0.85]\n",
      "Train auc:\n",
      "  Mean: 0.98\n",
      "  Standard Deviation: 0.01\n",
      "  95% Confidence Interval: [0.97, 0.99]\n"
     ]
    }
   ],
   "source": [
    "## decision tree ##\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Define the hyperparameter grid for Decision Tree\n",
    "param_grid = {\n",
    "    'criterion': ['gini', 'entropy'],  # Criterion for splitting\n",
    "    'max_depth': [3, 5, 10, None]      # Maximum depth of the tree\n",
    "}\n",
    "\n",
    "# Initialize Decision Tree Classifier\n",
    "dt_model = DecisionTreeClassifier(random_state=42)\n",
    "\n",
    "# To store results\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=dt_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "    \n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b32d5ce7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.71, Recall: 0.91, F1-Score: 0.80, Test AUC: 0.79, Training AUC: 0.96\n",
      "  Best Parameters: {'learning_rate': 0.01, 'n_estimators': 200}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 1.00, Recall: 0.64, F1-Score: 0.78, Test AUC: 0.93, Training AUC: 1.00\n",
      "  Best Parameters: {'learning_rate': 0.3, 'n_estimators': 50}\n",
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.80, Recall: 0.73, F1-Score: 0.76, Test AUC: 0.75, Training AUC: 1.00\n",
      "  Best Parameters: {'learning_rate': 0.3, 'n_estimators': 50}\n",
      "Fold Results:\n",
      "  Accuracy: 0.85, Precision: 0.89, Recall: 0.80, F1-Score: 0.84, Test AUC: 0.92, Training AUC: 1.00\n",
      "  Best Parameters: {'learning_rate': 0.1, 'n_estimators': 100}\n",
      "Fold Results:\n",
      "  Accuracy: 0.65, Precision: 0.64, Recall: 0.70, F1-Score: 0.67, Test AUC: 0.73, Training AUC: 1.00\n",
      "  Best Parameters: {'learning_rate': 0.3, 'n_estimators': 50}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.76\n",
      "  Standard Deviation: 0.07\n",
      "  95% Confidence Interval: [0.68, 0.84]\n",
      "Precision:\n",
      "  Mean: 0.81\n",
      "  Standard Deviation: 0.13\n",
      "  95% Confidence Interval: [0.65, 0.97]\n",
      "Recall:\n",
      "  Mean: 0.75\n",
      "  Standard Deviation: 0.09\n",
      "  95% Confidence Interval: [0.64, 0.87]\n",
      "F1:\n",
      "  Mean: 0.77\n",
      "  Standard Deviation: 0.06\n",
      "  95% Confidence Interval: [0.70, 0.84]\n",
      "Test auc:\n",
      "  Mean: 0.82\n",
      "  Standard Deviation: 0.09\n",
      "  95% Confidence Interval: [0.72, 0.93]\n",
      "Train auc:\n",
      "  Mean: 0.99\n",
      "  Standard Deviation: 0.02\n",
      "  95% Confidence Interval: [0.97, 1.01]\n"
     ]
    }
   ],
   "source": [
    "## LGBM\n",
    "# Define outer cross-validation\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Define the hyperparameter grid for LightGBM\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],  # Number of boosting rounds\n",
    "    'learning_rate': [0.01, 0.1, 0.3]  # Learning rate\n",
    "}\n",
    "\n",
    "# Initialize LightGBM Classifier\n",
    "lgbm_model = LGBMClassifier(random_state=42)\n",
    "\n",
    "# To store results\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=lgbm_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "\n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ccf7a8ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold Results:\n",
      "  Accuracy: 0.70, Precision: 0.73, Recall: 0.73, F1-Score: 0.73, Test AUC: 0.69, Training AUC: 0.91\n",
      "  Best Parameters: {'n_neighbors': 10, 'weights': 'uniform'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.85, Precision: 1.00, Recall: 0.73, F1-Score: 0.84, Test AUC: 0.89, Training AUC: 1.00\n",
      "  Best Parameters: {'n_neighbors': 10, 'weights': 'distance'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.75, Precision: 0.88, Recall: 0.64, F1-Score: 0.74, Test AUC: 0.77, Training AUC: 0.89\n",
      "  Best Parameters: {'n_neighbors': 10, 'weights': 'uniform'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.80, Precision: 1.00, Recall: 0.60, F1-Score: 0.75, Test AUC: 0.83, Training AUC: 0.85\n",
      "  Best Parameters: {'n_neighbors': 10, 'weights': 'uniform'}\n",
      "Fold Results:\n",
      "  Accuracy: 0.70, Precision: 0.70, Recall: 0.70, F1-Score: 0.70, Test AUC: 0.76, Training AUC: 1.00\n",
      "  Best Parameters: {'n_neighbors': 3, 'weights': 'distance'}\n",
      "\n",
      "Final Results with 95% Confidence Intervals:\n",
      "Accuracy:\n",
      "  Mean: 0.76\n",
      "  Standard Deviation: 0.06\n",
      "  95% Confidence Interval: [0.69, 0.83]\n",
      "Precision:\n",
      "  Mean: 0.86\n",
      "  Standard Deviation: 0.13\n",
      "  95% Confidence Interval: [0.70, 1.02]\n",
      "Recall:\n",
      "  Mean: 0.68\n",
      "  Standard Deviation: 0.05\n",
      "  95% Confidence Interval: [0.61, 0.74]\n",
      "F1:\n",
      "  Mean: 0.75\n",
      "  Standard Deviation: 0.05\n",
      "  95% Confidence Interval: [0.69, 0.81]\n",
      "Test auc:\n",
      "  Mean: 0.79\n",
      "  Standard Deviation: 0.07\n",
      "  95% Confidence Interval: [0.70, 0.87]\n",
      "Train auc:\n",
      "  Mean: 0.93\n",
      "  Standard Deviation: 0.06\n",
      "  95% Confidence Interval: [0.85, 1.00]\n"
     ]
    }
   ],
   "source": [
    "## KNN ###\n",
    "# Define outer cross-validation\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Define the hyperparameter grid for KNN\n",
    "param_grid = {\n",
    "    'n_neighbors': [3, 5, 10],\n",
    "    'weights': ['uniform', 'distance']\n",
    "}\n",
    "\n",
    "# Initialize KNN Classifier\n",
    "knn_model = KNeighborsClassifier()\n",
    "\n",
    "# To store results\n",
    "outer_metrics = {\n",
    "    'accuracy': [],\n",
    "    'precision': [],\n",
    "    'recall': [],\n",
    "    'f1': [],\n",
    "    'test_auc': [],\n",
    "    'train_auc': []\n",
    "}\n",
    "\n",
    "# Perform Nested Cross-Validation\n",
    "for train_index, test_index in outer_cv.split(X, y):\n",
    "    # Outer loop: Split into training and testing sets\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "    \n",
    "    # Inner cross-validation for hyperparameter tuning\n",
    "    inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "    grid_search = GridSearchCV(\n",
    "        estimator=knn_model, param_grid=param_grid, cv=inner_cv, scoring='accuracy', n_jobs=-1\n",
    "    )\n",
    "    grid_search.fit(X_train, y_train)\n",
    "    \n",
    "    # Get the best model from inner cross-validation\n",
    "    best_model = grid_search.best_estimator_\n",
    "    \n",
    "    # Predict on training and testing sets\n",
    "    y_train_proba = best_model.predict_proba(X_train)[:, 1]\n",
    "    y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "    \n",
    "    # Calculate training and test AUC\n",
    "    train_auc = roc_auc_score(y_train, y_train_proba)\n",
    "    test_auc = roc_auc_score(y_test, y_test_proba)\n",
    "    \n",
    "    # Calculate metrics on the test set\n",
    "    accuracy = accuracy_score(y_test, y_test_pred)\n",
    "    precision = precision_score(y_test, y_test_pred, zero_division=1)\n",
    "    recall = recall_score(y_test, y_test_pred)\n",
    "    f1 = f1_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store metrics\n",
    "    outer_metrics['accuracy'].append(accuracy)\n",
    "    outer_metrics['precision'].append(precision)\n",
    "    outer_metrics['recall'].append(recall)\n",
    "    outer_metrics['f1'].append(f1)\n",
    "    outer_metrics['test_auc'].append(test_auc)\n",
    "    outer_metrics['train_auc'].append(train_auc)\n",
    "    \n",
    "    print(f\"Fold Results:\")\n",
    "    print(f\"  Accuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}, F1-Score: {f1:.2f}, Test AUC: {test_auc:.2f}, Training AUC: {train_auc:.2f}\")\n",
    "    print(f\"  Best Parameters: {grid_search.best_params_}\")\n",
    "\n",
    "from scipy.stats import t\n",
    "# Calculate mean, standard deviation, and 95% confidence intervals\n",
    "n_folds = len(outer_metrics['accuracy'])  # Number of outer folds\n",
    "confidence_level = 0.95  # Confidence level\n",
    "df = n_folds - 1  # Degrees of freedom\n",
    "t_value = t.ppf((1 + confidence_level) / 2, df)  # t-value for 95% CI\n",
    "\n",
    "# Print results with confidence intervals\n",
    "print(\"\\nFinal Results with 95% Confidence Intervals:\")\n",
    "for metric, values in outer_metrics.items():\n",
    "    mean_metric = np.mean(values)\n",
    "    std_metric = np.std(values)\n",
    "    margin_error = t_value * (std_metric / np.sqrt(n_folds))\n",
    "    ci_lower = mean_metric - margin_error\n",
    "    ci_upper = mean_metric + margin_error\n",
    "\n",
    "    print(f\"{metric.replace('_', ' ').capitalize()}:\")\n",
    "    print(f\"  Mean: {mean_metric:.2f}\")\n",
    "    print(f\"  Standard Deviation: {std_metric:.2f}\")\n",
    "    print(f\"  95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a34995f",
   "metadata": {},
   "source": [
    "# Part 5 : Plot Multiple ROC curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "34a8ba91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Logistic Regression...\n",
      "  Fold AUC: 0.89\n",
      "  Fold AUC: 0.87\n",
      "  Fold AUC: 0.84\n",
      "  Fold AUC: 1.00\n",
      "  Fold AUC: 0.79\n",
      "Completed Logistic Regression.\n",
      "Processing SVM...\n",
      "  Fold AUC: 0.88\n",
      "  Fold AUC: 0.96\n",
      "  Fold AUC: 0.86\n",
      "  Fold AUC: 0.98\n",
      "  Fold AUC: 0.86\n",
      "Completed SVM.\n",
      "Processing Random Forest...\n",
      "  Fold AUC: 0.79\n",
      "  Fold AUC: 0.99\n",
      "  Fold AUC: 0.89\n",
      "  Fold AUC: 0.89\n",
      "  Fold AUC: 0.80\n",
      "Completed Random Forest.\n",
      "Processing Decision Tree...\n",
      "  Fold AUC: 0.60\n",
      "  Fold AUC: 0.75\n",
      "  Fold AUC: 0.86\n",
      "  Fold AUC: 0.80\n",
      "  Fold AUC: 0.67\n",
      "Completed Decision Tree.\n",
      "Processing LightGBM...\n",
      "  Fold AUC: 0.79\n",
      "  Fold AUC: 0.92\n",
      "  Fold AUC: 0.78\n",
      "  Fold AUC: 0.92\n",
      "  Fold AUC: 0.72\n",
      "Completed LightGBM.\n",
      "Processing KNN...\n",
      "  Fold AUC: 0.72\n",
      "  Fold AUC: 0.82\n",
      "  Fold AUC: 0.72\n",
      "  Fold AUC: 0.87\n",
      "  Fold AUC: 0.86\n",
      "Completed KNN.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# multiple roc plot\n",
    "# Define models and hyperparameter grids\n",
    "models = {\n",
    "    \"Logistic Regression\": (LogisticRegression(max_iter=1000, random_state=42), \n",
    "                            {'C': [0.1, 1, 10], 'penalty': ['l2'], 'solver': ['liblinear', 'saga']}),\n",
    "    \n",
    "    \"SVM\": (SVC(probability=True, random_state=42),\n",
    "            {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}),\n",
    "\n",
    "    \"Random Forest\": (RandomForestClassifier(random_state=42),\n",
    "                      {'n_estimators': [50, 100, 200], 'max_depth': [None, 10, 20]}),\n",
    "\n",
    "    \"Decision Tree\": (DecisionTreeClassifier(random_state=42),\n",
    "                      {'max_depth': [5, 10, None], 'criterion': ['gini', 'entropy']}),\n",
    "\n",
    "    \"LightGBM\": (LGBMClassifier(random_state=42),\n",
    "                 {'n_estimators': [50, 100, 200], 'learning_rate': [0.01, 0.1, 0.2]}),\n",
    "\n",
    "    \"KNN\": (KNeighborsClassifier(),\n",
    "            {'n_neighbors': [3, 5, 7], 'weights': ['uniform', 'distance']})\n",
    "}\n",
    "\n",
    "# Define outer cross-validation\n",
    "outer_cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Store results for each model\n",
    "roc_data = {name: {'tprs': [], 'aucs': [], 'mean_fpr': np.linspace(0, 1, 100)} for name in models}\n",
    "\n",
    "# Perform nested cross-validation for each model\n",
    "for name, (model, param_grid) in models.items():\n",
    "    print(f\"Processing {name}...\")\n",
    "    for train_index, test_index in outer_cv.split(X, y):\n",
    "        # Split data\n",
    "        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "\n",
    "        # Inner CV for hyperparameter tuning\n",
    "        inner_cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\n",
    "        grid_search = GridSearchCV(\n",
    "            estimator=model, param_grid=param_grid, cv=inner_cv, scoring='roc_auc', n_jobs=-1\n",
    "        )\n",
    "        grid_search.fit(X_train, y_train)\n",
    "        \n",
    "        # Get the best model and predict probabilities\n",
    "        best_model = grid_search.best_estimator_\n",
    "        y_test_proba = best_model.predict_proba(X_test)[:, 1]\n",
    "        \n",
    "        # Compute ROC curve and AUC\n",
    "        fpr, tpr, _ = roc_curve(y_test, y_test_proba)\n",
    "        roc_auc = auc(fpr, tpr)\n",
    "        roc_data[name]['aucs'].append(roc_auc)\n",
    "        \n",
    "        # Interpolate TPR values to the mean FPR points\n",
    "        tpr_interp = np.interp(roc_data[name]['mean_fpr'], fpr, tpr)\n",
    "        tpr_interp[0] = 0.0\n",
    "        roc_data[name]['tprs'].append(tpr_interp)\n",
    "        print(f\"  Fold AUC: {roc_auc:.2f}\")\n",
    "        \n",
    "    print(f\"Completed {name}.\")\n",
    "\n",
    "# Plot the ROC curves for all models\n",
    "plt.figure(figsize=(12, 8))\n",
    "for name, data in roc_data.items():\n",
    "    mean_tpr = np.mean(data['tprs'], axis=0)\n",
    "    mean_tpr[-1] = 1.0  # Ensure the last point is 1\n",
    "    mean_auc = auc(data['mean_fpr'], mean_tpr)\n",
    "    std_auc = np.std(data['aucs'])\n",
    "    plt.plot(data['mean_fpr'], mean_tpr, lw=2, label=f\"{name} (AUC = {mean_auc:.2f} ± {std_auc:.2f})\")\n",
    "\n",
    "# Add chance line\n",
    "plt.plot([0, 1], [0, 1], linestyle=\"--\", color=\"gray\", label=\"Chance\", lw=2)\n",
    "\n",
    "# Add labels and legend\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Curves for Multiple Models (Nested Cross-Validation)\")\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.grid()\n",
    "\n",
    "\n",
    "plt.savefig('fig2_cv_multiROC.jpg', dpi=300)\n",
    "plt.savefig('fig2_cv_multiROC.eps', format='eps')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0c1c0c8",
   "metadata": {},
   "source": [
    "# Part 6 : plot SHAP plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e6be4c7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The feature_perturbation option is now deprecated in favor of using the appropriate masker (maskers.Independent, or maskers.Impute)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x482.4 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# shap figure\n",
    "import shap\n",
    "model_filename = \"svm_best_model.pkl\"\n",
    "with open(model_filename, 'rb') as file:\n",
    "    best_model = pickle.load(file)\n",
    "\n",
    "# Feature names\n",
    "feature_names = [\n",
    "    'Tapping Score (Right)',\n",
    "    'Tapping amplitude mean (Right)',\n",
    "    'Tapping amplitude SD (Right)',\n",
    "    'Amplitude decremental 1-5 (Right)',\n",
    "    'Amplitude decremental 1-7 (Right)',\n",
    "    'Amplitude decremental 1-10 (Right)',\n",
    "    'Tapping Score (Left)',\n",
    "    'Tapping amplitude mean (Left)',\n",
    "    'Tapping amplitude SD (Left)',\n",
    "    'Amplitude decremental 1-5 (Left)',\n",
    "    'Amplitude decremental 1-7 (Left)',\n",
    "    'Amplitude decremental 1-10 (Left)',\n",
    "    'Tapping different'\n",
    "]\n",
    "\n",
    "# Ensure X_train and X_test are prepared (replace these with your actual data)\n",
    "# Example: X_train, X_test are pandas DataFrames with appropriate features\n",
    "# Make sure the feature order in X_train and X_test matches `feature_names`.\n",
    "\n",
    "# Create the SHAP explainer for the loaded Logistic Regression model\n",
    "explainer = shap.LinearExplainer(best_model, X_train, feature_perturbation=\"interventional\")\n",
    "shap_values = explainer.shap_values(X_test)\n",
    "\n",
    "# Plot the SHAP summary\n",
    "plt.figure(figsize=(10, 6))\n",
    "shap.summary_plot(shap_values, X_test, feature_names=feature_names, show=False)\n",
    "\n",
    "# Save the plots in different formats\n",
    "plt.savefig('Figure 3 new_plos SHAP.eps', format='eps')\n",
    "plt.savefig('Figure 3 new_plos SHAP.jpg', dpi=300)\n",
    "plt.savefig('Figure 3 new_plos SHAP.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa0a17f1",
   "metadata": {},
   "source": [
    "# Part 7 : load model to detect bradykinesia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "83c8bee1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rp_count</th>\n",
       "      <th>rp_mean</th>\n",
       "      <th>rp_std</th>\n",
       "      <th>rp_diff5</th>\n",
       "      <th>rp_diff7</th>\n",
       "      <th>rp_diff10</th>\n",
       "      <th>lp_count</th>\n",
       "      <th>lp_mean</th>\n",
       "      <th>lp_std</th>\n",
       "      <th>lp_diff5</th>\n",
       "      <th>lp_diff7</th>\n",
       "      <th>lp_diff10</th>\n",
       "      <th>tap_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>30.593436</td>\n",
       "      <td>32.309672</td>\n",
       "      <td>16.82082</td>\n",
       "      <td>74.122522</td>\n",
       "      <td>74.122522</td>\n",
       "      <td>12</td>\n",
       "      <td>78.114833</td>\n",
       "      <td>12.959236</td>\n",
       "      <td>3.307396</td>\n",
       "      <td>10.617158</td>\n",
       "      <td>32.652202</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rp_count    rp_mean     rp_std  rp_diff5   rp_diff7  rp_diff10  lp_count  \\\n",
       "0         6  30.593436  32.309672  16.82082  74.122522  74.122522        12   \n",
       "\n",
       "     lp_mean     lp_std  lp_diff5   lp_diff7  lp_diff10  tap_diff  \n",
       "0  78.114833  12.959236  3.307396  10.617158  32.652202         6  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read csv data\n",
    "name = '292.csv'\n",
    "df = pd.read_csv(name, index_col=None, header=0)\n",
    "v_new = name.replace('.csv','')\n",
    "\n",
    "rp = df.loc[df['r_peak']==True,['r']]\n",
    "rp = rp.reset_index(drop=True)\n",
    "lp = df.loc[df['l_peak']==True,['l']]\n",
    "lp = lp.reset_index(drop=True)\n",
    "df5 = pd.concat([rp,lp],axis=1)\n",
    "#check NaN if less than 10 times\n",
    "rtap, ltap = len(rp),len(lp)\n",
    "tapmin = min(rtap,ltap)\n",
    "tap_diff = abs(rtap-ltap)\n",
    "if tapmin < 10:\n",
    "    ten = pd.DataFrame({'ten': [0] * 10})\n",
    "    df5 = pd.concat([df5,ten],axis=1)\n",
    "    df5.fillna(0, inplace=True)\n",
    "    del(df5['ten'])\n",
    "\n",
    "##### peak analysis\n",
    "rp_mean,rp_std = df5['r'].mean(), df5['r'].std()\n",
    "rp_diff5  = df5.iloc[0,0]-df5.iloc[4,0]\n",
    "rp_diff7  = df5.iloc[0,0]-df5.iloc[6,0]\n",
    "rp_diff10 = df5.iloc[0,0]-df5.iloc[9,0]\n",
    "\n",
    "lp_mean,lp_std = df5['l'].mean(), df5['l'].std()\n",
    "lp_diff5  = df5.iloc[0,1]-df5.iloc[4,1]\n",
    "lp_diff7  = df5.iloc[0,1]-df5.iloc[6,1]\n",
    "lp_diff10 = df5.iloc[0,1]-df5.iloc[9,1]\n",
    "\n",
    "new_row = {'video_no': v_new, \n",
    "            'rp_count':rtap,\n",
    "            'rp_mean':rp_mean,'rp_std':rp_std,\n",
    "            'rp_diff5':rp_diff5,\n",
    "            'rp_diff7':rp_diff7,'rp_diff10':rp_diff10,\n",
    "               \n",
    "            'lp_count':ltap, \n",
    "            'lp_mean':lp_mean,'lp_std':lp_std,\n",
    "            'lp_diff5':lp_diff5,\n",
    "            'lp_diff7':lp_diff7,'lp_diff10':lp_diff10,\n",
    "            'tap_diff':tap_diff}\n",
    "\n",
    "df2 = pd.DataFrame(new_row, index=[0])\n",
    "del(df2['video_no'])\n",
    "df = df2\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cfe7bf7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bradykinesia Detected\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "X does not have valid feature names, but SVC was fitted with feature names\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Support vector macine\n",
    "Pkl_Filename = 'svc1.pkl'\n",
    "with open(Pkl_Filename, 'rb') as file:  \n",
    "    svc = pickle.load(file)\n",
    "y_pred = svc.predict(df.values)  \n",
    "if y_pred == 1:\n",
    "    print('Bradykinesia Detected')\n",
    "else:\n",
    "    print('No Bradykinesia')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "678c9188",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
